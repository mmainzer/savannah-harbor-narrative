<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20191.19.0213.2333                               -->
<workbook source-build='2019.1.0 (20191.19.0213.2333)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <SpatialFileLayer />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='monthly-teu (savannah-unlading_2014-2018)' inline='true' name='federated.10sstqr12u8i5z10y81vi0toajb7' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='savannah-unlading_2014-2018' name='excel-direct.1clr5uo08z8mhq0zquyds1pujcm5'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/MTMAINZE/projects/project_74-savannah-harbor-narrative/savannah-harbor-narrative/data/unlading-data/savannah-unlading_2014-2018.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1clr5uo08z8mhq0zquyds1pujcm5' name='monthly-teu' table='[&apos;monthly-teu$&apos;]' type='table'>
          <columns gridOrigin='A1:O205:no:A1:O205:0' header='yes' outcome='6'>
            <column datatype='integer' name='Year' ordinal='0' />
            <column datatype='date' date-parse-format='MMMM' name='Month' ordinal='1' />
            <column datatype='string' name='Status' ordinal='2' />
            <column datatype='integer' name='Imports Full' ordinal='3' />
            <column datatype='integer' name='Imports Empty' ordinal='4' />
            <column datatype='integer' name='Imports Total' ordinal='5' />
            <column datatype='real' name='Imports YoY' ordinal='6' />
            <column datatype='integer' name='Exports Full' ordinal='7' />
            <column datatype='integer' name='Exports Empty' ordinal='8' />
            <column datatype='integer' name='Exports Total' ordinal='9' />
            <column datatype='real' name='Exports YoY' ordinal='10' />
            <column datatype='integer' name='Total Full' ordinal='11' />
            <column datatype='integer' name='Total Empty' ordinal='12' />
            <column datatype='integer' name='Total' ordinal='13' />
            <column datatype='real' name='Total YoY' ordinal='14' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>4</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:O205:no:A1:O205:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Month</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Month]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Month</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Status]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Status</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Imports Full</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Imports Full]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Imports Full</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Imports Empty</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Imports Empty]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Imports Empty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Imports Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Imports Total]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Imports Total</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Imports YoY</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Imports YoY]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Imports YoY</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Exports Full</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Exports Full]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Exports Full</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Exports Empty</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Exports Empty]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Exports Empty</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Exports Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Exports Total]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Exports Total</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Exports YoY</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Exports YoY]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Exports YoY</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Full</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Full]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Total Full</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Empty</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Empty]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Total Empty</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Total</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total YoY</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total YoY]</local-name>
            <parent-name>[monthly-teu]</parent-name>
            <remote-alias>Total YoY</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
      </column>
      <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
      </column>
      <column caption='Exports % of' datatype='real' default-format='n#,##0.0&quot;%&quot;;-#,##0.0&quot;%&quot;' name='[Calculation_428967894028173316]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='( SUM([Exports Total]) / SUM([Total]) ) * 100' />
      </column>
      <column caption='2018 TEU' datatype='integer' default-format='n0,,.00M;-0,,.00M' name='[Calculation_870602134463655936]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Year] = 2018 THEN [Total]&#13;&#10;else null&#13;&#10;END' />
      </column>
      <column caption='Imports % of' datatype='real' default-format='n#,##0.0&quot;%&quot;;-#,##0.0&quot;%&quot;' name='[Exports % of (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='( SUM([Imports Total]) / SUM([Total]) ) * 100' />
      </column>
      <column datatype='integer' name='[Exports Total]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Imports Total]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Total]' derivation='Sum' name='[pcdf:sum:Total:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Exports Total]' derivation='Sum' name='[sum:Exports Total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Imports Total]' derivation='Sum' name='[sum:Imports Total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.371281' measure-ordering='alphabetic' measure-percentage='0.628719' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[pcdf:sum:Total:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Exports Total:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Imports Total:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='Year' />
        <field-sort-custom-order field='Calculation_428967894022410242' />
        <field-sort-custom-order field='Month' />
        <field-sort-custom-order field='Calculation_428967894022176769' />
        <field-sort-custom-order field='Imports Full' />
        <field-sort-custom-order field='Imports Empty' />
        <field-sort-custom-order field='Imports Total' />
        <field-sort-custom-order field='Imports YoY' />
        <field-sort-custom-order field='Exports Full' />
        <field-sort-custom-order field='Exports Empty' />
        <field-sort-custom-order field='Exports Total' />
        <field-sort-custom-order field='Exports YoY' />
        <field-sort-custom-order field='Total Full' />
        <field-sort-custom-order field='Total Empty' />
        <field-sort-custom-order field='Total' />
        <field-sort-custom-order field='Total YoY' />
      </field-sort-info>
    </datasource>
    <datasource caption='port-of-lading-summary (savannah-unlading_2014-2018)' inline='true' name='federated.1phuvdy1lq0m8w1h3bhw90cfl96s' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='savannah-unlading_2014-2018' name='excel-direct.0yhm0kx1yhvyj614xwj5o0tofxdc'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/MTMAINZE/projects/project_74-savannah-harbor-narrative/savannah-harbor-narrative/data/unlading-data/savannah-unlading_2014-2018.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0yhm0kx1yhvyj614xwj5o0tofxdc' name='port-of-lading-summary' table='[&apos;port-of-lading-summary$&apos;]' type='table'>
          <columns gridOrigin='A1:E1910:no:A1:E1910:0' header='yes' outcome='6'>
            <column datatype='integer' name='Year' ordinal='0' />
            <column datatype='string' name='Port of Lading' ordinal='1' />
            <column datatype='string' name='Country of Lading' ordinal='2' />
            <column datatype='integer' name='Shipments' ordinal='3' />
            <column datatype='integer' name='Containers' ordinal='4' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Port of Lading</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Port of Lading]</local-name>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias>Port of Lading</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country of Lading</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country of Lading]</local-name>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias>Country of Lading</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shipments</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Shipments]</local-name>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias>Shipments</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Containers</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Containers]</local-name>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias>Containers</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[port-of-lading-summary]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E1910:no:A1:E1910:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Country of Lading]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;China (Mainland)&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Fiji Islands&quot;' value='&quot;Fiji&quot;' />
          <semantic-value key='&quot;Netherland Antilles&quot;' value='&quot;Netherlands&quot;' />
          <semantic-value key='&quot;St. Vincent &amp; Northern Grenadines&quot;' value='&quot;Saint Vincent and the Grenadines&quot;' />
          <semantic-value key='&quot;Venezuala&quot;' value='&quot;Venezuela&quot;' />
        </semantic-values>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Port of Lading]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;Aalesund&quot;' value='62.472119999999997' />
          <semantic-value key='&quot;Apapa&quot;' value='6.4554280000000004' />
          <semantic-value key='&quot;Aratu&quot;' value='-12.778541000000001' />
          <semantic-value key='&quot;Bahia de Amuay&quot;' value='11.776904' />
          <semantic-value key='&quot;Bangor&quot;' value='53.227094999999998' />
          <semantic-value key='&quot;Barcadera&quot;' value='12.48315' />
          <semantic-value key='&quot;Bassens&quot;' value='44.907451999999999' />
          <semantic-value key='&quot;Bei Jao&quot;' value='22.928619000000001' />
          <semantic-value key='&quot;Beilun&quot;' value='29.906571' />
          <semantic-value key='&quot;Bell Bay&quot;' value='-41.13308' />
          <semantic-value key='&quot;Boca Chica&quot;' value='18.452537' />
          <semantic-value key='&quot;Bukhta Severnaya&quot;' value='42.934216999999997' />
          <semantic-value key='&quot;Cagayan de Oro&quot;' value='8.4896419999999999' />
          <semantic-value key='&quot;Caucedo&quot;' value='18.425775000000002' />
          <semantic-value key='&quot;Chiwan&quot;' value='22.460884' />
          <semantic-value key='&quot;Constantza&quot;' value='44.162775000000003' />
          <semantic-value key='&quot;Contrecoeur&quot;' value='45.863187000000003' />
          <semantic-value key='&quot;Dos Bocas&quot;' value='19.082697' />
          <semantic-value key='&quot;El Dekheila&quot;' value='31.125387' />
          <semantic-value key='&quot;Escombreras&quot;' value='37.559161000000003' />
          <semantic-value key='&quot;Fremantle&quot;' value='-32.057139999999997' />
          <semantic-value key='&quot;Fuzhou&quot;' value='26.057061000000001' />
          <semantic-value key='&quot;Gevle&quot;' value='60.676642000000001' />
          <semantic-value key='&quot;Gozo Island&quot;' value='36.042090000000002' />
          <semantic-value key='&quot;Hakata&quot;' value='33.610410000000002' />
          <semantic-value key='&quot;Hirohata&quot;' value='34.787025999999997' />
          <semantic-value key='&quot;Hitaki Ko&quot;' value='34.787025999999997' />
          <semantic-value key='&quot;Irvine Harbor&quot;' value='55.608159999999998' />
          <semantic-value key='&quot;Itajay&quot;' value='-26.912541000000001' />
          <semantic-value key='&quot;Jebel Ali&quot;' value='24.987984999999998' />
          <semantic-value key='&quot;Jorf Lasfar&quot;' value='33.155647999999999' />
          <semantic-value key='&quot;Judda&quot;' value='21.494458000000002' />
          <semantic-value key='&quot;Kaohsiung&quot;' value='22.673974000000001' />
          <semantic-value key='&quot;Kemlik&quot;' value='39.976376000000002' />
          <semantic-value key='&quot;Khor Fakkan&quot;' value='25.353408000000002' />
          <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='26.474426000000001' />
          <semantic-value key='&quot;Kingston&quot;' value='44.230178000000002' />
          <semantic-value key='&quot;L&apos;Avera&quot;' value='43.388568999999997' />
          <semantic-value key='&quot;La Pampilla&quot;' value='-11.920743' />
          <semantic-value key='&quot;Laem Chabang&quot;' value='13.101851999999999' />
          <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='9.0482990000000001' />
          <semantic-value key='&quot;Lazaro Cardenas&quot;' value='17.954609999999999' />
          <semantic-value key='&quot;Luda&quot;' value='22.310763999999999' />
          <semantic-value key='&quot;Mahahual&quot;' value='18.715810000000001' />
          <semantic-value key='&quot;Mamonal&quot;' value='10.312326000000001' />
          <semantic-value key='&quot;Military - Port Kelang&quot;' value='2.996632' />
          <semantic-value key='&quot;Moin&quot;' value='9.9924759999999999' />
          <semantic-value key='&quot;Moji&quot;' value='33.911963' />
          <semantic-value key='&quot;Mosel&quot;' value='43.268963999999997' />
          <semantic-value key='&quot;Munguba&quot;' value='-0.91625999999999996' />
          <semantic-value key='&quot;Mylaki&quot;' value='38.38353' />
          <semantic-value key='&quot;Nagoya Ko&quot;' value='35.084313999999999' />
          <semantic-value key='&quot;Nemrut Bay&quot;' value='38.744047000000002' />
          <semantic-value key='&quot;New Mangalore&quot;' value='12.947471999999999' />
          <semantic-value key='&quot;Nhava Sheva&quot;' value='18.949912999999999' />
          <semantic-value key='&quot;Ocho Rios&quot;' value='18.407342' />
          <semantic-value key='&quot;Pajaritos&quot;' value='20.557535000000001' />
          <semantic-value key='&quot;Panderma&quot;' value='40.353513' />
          <semantic-value key='&quot;Pasir Gudang&quot;' value='1.4660839999999999' />
          <semantic-value key='&quot;Penarth&quot;' value='51.445248999999997' />
          <semantic-value key='&quot;Piraievs&quot;' value='37.943368999999997' />
          <semantic-value key='&quot;Pohang Hang&quot;' value='36.029528999999997' />
          <semantic-value key='&quot;Point Lisas&quot;' value='10.407755999999999' />
          <semantic-value key='&quot;Point Tupper&quot;' value='45.606653000000001' />
          <semantic-value key='&quot;Pointe a Pierre&quot;' value='10.31551' />
          <semantic-value key='&quot;Port do Pecem&quot;' value='-3.5521180000000001' />
          <semantic-value key='&quot;Port Esquivel&quot;' value='17.893920999999999' />
          <semantic-value key='&quot;Port Kembla&quot;' value='-34.486659000000003' />
          <semantic-value key='&quot;Port Rashid&quot;' value='25.284811999999999' />
          <semantic-value key='&quot;Port Swettenham&quot;' value='2.9986890000000002' />
          <semantic-value key='&quot;Porto de Leixoes&quot;' value='41.183098000000001' />
          <semantic-value key='&quot;Portocel&quot;' value='-19.840129999999998' />
          <semantic-value key='&quot;Progreso&quot;' value='21.279890999999999' />
          <semantic-value key='&quot;Puerto Bolivar&quot;' value='12.219196' />
          <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-36.715183000000003' />
          <semantic-value key='&quot;Puerto Henecan&quot;' value='13.404448' />
          <semantic-value key='&quot;Puerto Miranda&quot;' value='7.9043239999999999' />
          <semantic-value key='&quot;Puerto Nuevo&quot;' value='-2.283944' />
          <semantic-value key='&quot;Puerto Quetzal&quot;' value='13.929124' />
          <semantic-value key='&quot;Puerto Vargas&quot;' value='9.7312200000000004' />
          <semantic-value key='&quot;Pulum Bukum&quot;' value='1.234464' />
          <semantic-value key='&quot;Punta Morales&quot;' value='10.067382' />
          <semantic-value key='&quot;Pyungtaek&quot;' value='36.992193999999998' />
          <semantic-value key='&quot;Ras Al Khafji&quot;' value='28.428712999999998' />
          <semantic-value key='&quot;Ringaskiddy&quot;' value='51.830506999999997' />
          <semantic-value key='&quot;Rio Jaina&quot;' value='18.600787' />
          <semantic-value key='&quot;Ruwais&quot;' value='24.109658' />
          <semantic-value key='&quot;Samarai&quot;' value='-10.612055' />
          <semantic-value key='&quot;San Juan de Nieva&quot;' value='43.587783000000002' />
          <semantic-value key='&quot;San Lorenzo&quot;' value='-32.747911000000002' />
          <semantic-value key='&quot;Sangi&quot;' value='10.385949' />
          <semantic-value key='&quot;Santa Clara&quot;' value='-2.4248539999999998' />
          <semantic-value key='&quot;Santa Panagia&quot;' value='37.101041000000002' />
          <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='15.690427' />
          <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-2.5393650000000001' />
          <semantic-value key='&quot;Sarnia&quot;' value='42.974594000000003' />
          <semantic-value key='&quot;Saupe&quot;' value='-12.738681' />
          <semantic-value key='&quot;Savanna La Mar&quot;' value='18.229755000000001' />
          <semantic-value key='&quot;Selangor&quot;' value='3.3391470000000001' />
          <semantic-value key='&quot;Sepetiba Bay&quot;' value='-22.986329000000001' />
          <semantic-value key='&quot;Serangoon Harbor&quot;' value='1.3974340000000001' />
          <semantic-value key='&quot;Seven Islands&quot;' value='44.455103000000001' />
          <semantic-value key='&quot;Shekou&quot;' value='22.481929000000001' />
          <semantic-value key='&quot;Shellhaven&quot;' value='51.512303000000003' />
          <semantic-value key='&quot;Shilong&quot;' value='23.105274999999999' />
          <semantic-value key='&quot;Simizu&quot;' value='35.098028999999997' />
          <semantic-value key='&quot;Sinoe&quot;' value='5.0250640000000004' />
          <semantic-value key='&quot;South Riding Point&quot;' value='26.625854' />
          <semantic-value key='&quot;South Shetlands&quot;' value='-62.207858999999999' />
          <semantic-value key='&quot;Southhampton&quot;' value='50.909450999999997' />
          <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='18.429884999999999' />
          <semantic-value key='&quot;St. Eustatius&quot;' value='52.054468' />
          <semantic-value key='&quot;St. Martin&quot;' value='18.081091000000001' />
          <semantic-value key='&quot;Stadersand&quot;' value='53.620538000000003' />
          <semantic-value key='&quot;Subic Bay&quot;' value='14.791409' />
          <semantic-value key='&quot;Sungei Pakning&quot;' value='1.3399970000000001' />
          <semantic-value key='&quot;Surabaya&quot;' value='-7.2595929999999997' />
          <semantic-value key='&quot;Susaka&quot;' value='44.508685' />
          <semantic-value key='&quot;Taichung&quot;' value='24.139690999999999' />
          <semantic-value key='&quot;Tanjung Pelepas&quot;' value='1.362382' />
          <semantic-value key='&quot;Tanjunguban&quot;' value='1.0615289999999999' />
          <semantic-value key='&quot;Teesport&quot;' value='54.610365999999999' />
          <semantic-value key='&quot;Teluk Bayur&quot;' value='-0.99244399999999999' />
          <semantic-value key='&quot;Tema&quot;' value='5.7346950000000003' />
          <semantic-value key='&quot;Tilbury&quot;' value='51.462698000000003' />
          <semantic-value key='&quot;Tin Can Island&quot;' value='6.4314200000000001' />
          <semantic-value key='&quot;Tobago&quot;' value='11.232821' />
          <semantic-value key='&quot;Trombetas&quot;' value='-7.399667' />
          <semantic-value key='&quot;Turiamo&quot;' value='10.442997999999999' />
          <semantic-value key='&quot;Tutunciftlik&quot;' value='40.761786999999998' />
          <semantic-value key='&quot;Uzunkum&quot;' value='37.817354999999999' />
          <semantic-value key='&quot;Vacamonte&quot;' value='8.910425' />
          <semantic-value key='&quot;Vaksdal&quot;' value='60.578510000000001' />
          <semantic-value key='&quot;Vallvik&quot;' value='61.184803000000002' />
          <semantic-value key='&quot;Victoria&quot;' value='48.428511999999998' />
          <semantic-value key='&quot;Vila do Conde&quot;' value='-1.5419860000000001' />
          <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='37.194201999999997' />
          <semantic-value key='&quot;Villequier&quot;' value='49.512703000000002' />
          <semantic-value key='&quot;Villeta&quot;' value='-25.507593' />
          <semantic-value key='&quot;Vinaroz&quot;' value='40.468581' />
          <semantic-value key='&quot;Vunda Point&quot;' value='-17.680088000000001' />
          <semantic-value key='&quot;Whale Cay&quot;' value='25.403051999999999' />
          <semantic-value key='&quot;Whampoa&quot;' value='23.084468999999999' />
          <semantic-value key='&quot;Wilsons Beach&quot;' value='44.932456999999999' />
          <semantic-value key='&quot;Xcalac&quot;' value='18.271056000000002' />
          <semantic-value key='&quot;Xingang&quot;' value='39.002934000000003' />
          <semantic-value key='&quot;Yandina&quot;' value='-9.0795949999999994' />
          <semantic-value key='&quot;Yantian&quot;' value='22.589849000000001' />
          <semantic-value key='&quot;Yarimca&quot;' value='40.764625000000002' />
          <semantic-value key='&quot;Yarmouth Harbor&quot;' value='50.705174' />
          <semantic-value key='&quot;Yarraville&quot;' value='-37.817494000000003' />
          <semantic-value key='&quot;Yentai&quot;' value='37.472777999999998' />
          <semantic-value key='&quot;Yerakini&quot;' value='40.278911000000001' />
          <semantic-value key='&quot;Yura&quot;' value='33.972456999999999' />
          <semantic-value key='&quot;Zeebrugge&quot;' value='51.319737000000003' />
          <semantic-value key='&quot;Zirku Island&quot;' value='24.879750000000001' />
          <semantic-value key='&quot;Zwyndrecht&quot;' value='51.215713999999998' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;Aalesund&quot;' value='6.1499079999999999' />
          <semantic-value key='&quot;Apapa&quot;' value='3.3646500000000001' />
          <semantic-value key='&quot;Aratu&quot;' value='-38.497734999999999' />
          <semantic-value key='&quot;Bahia de Amuay&quot;' value='-70.242108000000002' />
          <semantic-value key='&quot;Bangor&quot;' value='-4.1282629999999996' />
          <semantic-value key='&quot;Barcadera&quot;' value='-69.990280999999996' />
          <semantic-value key='&quot;Bassens&quot;' value='-0.52819300000000002' />
          <semantic-value key='&quot;Bei Jao&quot;' value='113.208045' />
          <semantic-value key='&quot;Beilun&quot;' value='121.838385' />
          <semantic-value key='&quot;Bell Bay&quot;' value='146.85897800000001' />
          <semantic-value key='&quot;Boca Chica&quot;' value='-69.607164999999995' />
          <semantic-value key='&quot;Bukhta Severnaya&quot;' value='131.401184' />
          <semantic-value key='&quot;Cagayan de Oro&quot;' value='124.620439' />
          <semantic-value key='&quot;Caucedo&quot;' value='-69.630825999999999' />
          <semantic-value key='&quot;Chiwan&quot;' value='113.88923' />
          <semantic-value key='&quot;Constantza&quot;' value='28.636849000000002' />
          <semantic-value key='&quot;Contrecoeur&quot;' value='-73.251276000000004' />
          <semantic-value key='&quot;Dos Bocas&quot;' value='-96.146985000000001' />
          <semantic-value key='&quot;El Dekheila&quot;' value='29.812021999999999' />
          <semantic-value key='&quot;Escombreras&quot;' value='-0.96923999999999999' />
          <semantic-value key='&quot;Fremantle&quot;' value='115.743172' />
          <semantic-value key='&quot;Fuzhou&quot;' value='119.296423' />
          <semantic-value key='&quot;Gevle&quot;' value='17.142924000000001' />
          <semantic-value key='&quot;Gozo Island&quot;' value='14.252424' />
          <semantic-value key='&quot;Hakata&quot;' value='130.40307999999999' />
          <semantic-value key='&quot;Hirohata&quot;' value='135.40090000000001' />
          <semantic-value key='&quot;Hitaki Ko&quot;' value='135.40090000000001' />
          <semantic-value key='&quot;Irvine Harbor&quot;' value='-4.6887319999999999' />
          <semantic-value key='&quot;Itajay&quot;' value='-48.667282999999998' />
          <semantic-value key='&quot;Jebel Ali&quot;' value='55.022581000000002' />
          <semantic-value key='&quot;Jorf Lasfar&quot;' value='-8.6227920000000005' />
          <semantic-value key='&quot;Judda&quot;' value='39.171382999999999' />
          <semantic-value key='&quot;Kaohsiung&quot;' value='120.280269' />
          <semantic-value key='&quot;Kemlik&quot;' value='32.583550000000002' />
          <semantic-value key='&quot;Khor Fakkan&quot;' value='56.358727999999999' />
          <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='50.192681' />
          <semantic-value key='&quot;Kingston&quot;' value='-76.488794999999996' />
          <semantic-value key='&quot;L&apos;Avera&quot;' value='5.0305689999999998' />
          <semantic-value key='&quot;La Pampilla&quot;' value='-77.140218000000004' />
          <semantic-value key='&quot;Laem Chabang&quot;' value='100.913264' />
          <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='-82.081196000000006' />
          <semantic-value key='&quot;Lazaro Cardenas&quot;' value='-102.191582' />
          <semantic-value key='&quot;Luda&quot;' value='114.191295' />
          <semantic-value key='&quot;Mahahual&quot;' value='-87.707537000000002' />
          <semantic-value key='&quot;Mamonal&quot;' value='-75.501333000000002' />
          <semantic-value key='&quot;Military - Port Kelang&quot;' value='101.394172' />
          <semantic-value key='&quot;Moin&quot;' value='-83.094492000000002' />
          <semantic-value key='&quot;Moji&quot;' value='130.97021000000001' />
          <semantic-value key='&quot;Mosel&quot;' value='-2.9347590000000001' />
          <semantic-value key='&quot;Munguba&quot;' value='-52.44744' />
          <semantic-value key='&quot;Mylaki&quot;' value='24.061402000000001' />
          <semantic-value key='&quot;Nagoya Ko&quot;' value='136.883848' />
          <semantic-value key='&quot;Nemrut Bay&quot;' value='26.833552999999998' />
          <semantic-value key='&quot;New Mangalore&quot;' value='74.817625000000007' />
          <semantic-value key='&quot;Nhava Sheva&quot;' value='72.951025000000001' />
          <semantic-value key='&quot;Ocho Rios&quot;' value='-77.105808999999994' />
          <semantic-value key='&quot;Pajaritos&quot;' value='-97.474902' />
          <semantic-value key='&quot;Panderma&quot;' value='27.968993999999999' />
          <semantic-value key='&quot;Pasir Gudang&quot;' value='103.87198600000001' />
          <semantic-value key='&quot;Penarth&quot;' value='-3.1672250000000002' />
          <semantic-value key='&quot;Piraievs&quot;' value='23.643711' />
          <semantic-value key='&quot;Pohang Hang&quot;' value='129.37716399999999' />
          <semantic-value key='&quot;Point Lisas&quot;' value='-61.492524000000003' />
          <semantic-value key='&quot;Point Tupper&quot;' value='-61.352902' />
          <semantic-value key='&quot;Pointe a Pierre&quot;' value='-61.458786000000003' />
          <semantic-value key='&quot;Port do Pecem&quot;' value='-38.831755999999999' />
          <semantic-value key='&quot;Port Esquivel&quot;' value='-77.132018000000002' />
          <semantic-value key='&quot;Port Kembla&quot;' value='150.90251900000001' />
          <semantic-value key='&quot;Port Rashid&quot;' value='55.278204000000002' />
          <semantic-value key='&quot;Port Swettenham&quot;' value='101.391769' />
          <semantic-value key='&quot;Porto de Leixoes&quot;' value='-8.7028839999999992' />
          <semantic-value key='&quot;Portocel&quot;' value='-40.057651' />
          <semantic-value key='&quot;Progreso&quot;' value='-89.664766' />
          <semantic-value key='&quot;Puerto Bolivar&quot;' value='-71.999690000000001' />
          <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-72.981358' />
          <semantic-value key='&quot;Puerto Henecan&quot;' value='-87.429236000000003' />
          <semantic-value key='&quot;Puerto Miranda&quot;' value='-67.478913000000006' />
          <semantic-value key='&quot;Puerto Nuevo&quot;' value='-78.897141000000005' />
          <semantic-value key='&quot;Puerto Quetzal&quot;' value='-90.761673999999999' />
          <semantic-value key='&quot;Puerto Vargas&quot;' value='-82.814772000000005' />
          <semantic-value key='&quot;Pulum Bukum&quot;' value='103.762342' />
          <semantic-value key='&quot;Punta Morales&quot;' value='-84.948671000000004' />
          <semantic-value key='&quot;Pyungtaek&quot;' value='127.085368' />
          <semantic-value key='&quot;Ras Al Khafji&quot;' value='48.49053' />
          <semantic-value key='&quot;Ringaskiddy&quot;' value='-8.3211759999999995' />
          <semantic-value key='&quot;Rio Jaina&quot;' value='-70.147318999999996' />
          <semantic-value key='&quot;Ruwais&quot;' value='52.721159999999998' />
          <semantic-value key='&quot;Samarai&quot;' value='150.66402099999999' />
          <semantic-value key='&quot;San Juan de Nieva&quot;' value='-5.9356070000000001' />
          <semantic-value key='&quot;San Lorenzo&quot;' value='-60.734498000000002' />
          <semantic-value key='&quot;Sangi&quot;' value='123.65241' />
          <semantic-value key='&quot;Santa Clara&quot;' value='-54.714204000000002' />
          <semantic-value key='&quot;Santa Panagia&quot;' value='15.269824' />
          <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='-88.620148999999998' />
          <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-44.286963' />
          <semantic-value key='&quot;Sarnia&quot;' value='-82.411687999999998' />
          <semantic-value key='&quot;Saupe&quot;' value='-38.612997' />
          <semantic-value key='&quot;Savanna La Mar&quot;' value='-78.139852000000005' />
          <semantic-value key='&quot;Selangor&quot;' value='101.560378' />
          <semantic-value key='&quot;Sepetiba Bay&quot;' value='-43.693316000000003' />
          <semantic-value key='&quot;Serangoon Harbor&quot;' value='103.94113400000001' />
          <semantic-value key='&quot;Seven Islands&quot;' value='-63.674892' />
          <semantic-value key='&quot;Shekou&quot;' value='113.919675' />
          <semantic-value key='&quot;Shellhaven&quot;' value='0.50248700000000002' />
          <semantic-value key='&quot;Shilong&quot;' value='113.874206' />
          <semantic-value key='&quot;Simizu&quot;' value='138.89828600000001' />
          <semantic-value key='&quot;Sinoe&quot;' value='-9.0406259999999996' />
          <semantic-value key='&quot;South Riding Point&quot;' value='-78.230118000000004' />
          <semantic-value key='&quot;South Shetlands&quot;' value='-58.691121000000003' />
          <semantic-value key='&quot;Southhampton&quot;' value='-1.403246' />
          <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='-77.199562999999998' />
          <semantic-value key='&quot;St. Eustatius&quot;' value='4.5436209999999999' />
          <semantic-value key='&quot;St. Martin&quot;' value='-63.050814000000003' />
          <semantic-value key='&quot;Stadersand&quot;' value='9.5289560000000009' />
          <semantic-value key='&quot;Subic Bay&quot;' value='120.24220699999999' />
          <semantic-value key='&quot;Sungei Pakning&quot;' value='102.13534199999999' />
          <semantic-value key='&quot;Surabaya&quot;' value='112.754603' />
          <semantic-value key='&quot;Susaka&quot;' value='14.306426' />
          <semantic-value key='&quot;Taichung&quot;' value='120.661964' />
          <semantic-value key='&quot;Tanjung Pelepas&quot;' value='103.553287' />
          <semantic-value key='&quot;Tanjunguban&quot;' value='104.220911' />
          <semantic-value key='&quot;Teesport&quot;' value='-1.1508910000000001' />
          <semantic-value key='&quot;Teluk Bayur&quot;' value='100.383875' />
          <semantic-value key='&quot;Tema&quot;' value='0.031449999999999999' />
          <semantic-value key='&quot;Tilbury&quot;' value='0.36106100000000002' />
          <semantic-value key='&quot;Tin Can Island&quot;' value='3.3436370000000002' />
          <semantic-value key='&quot;Tobago&quot;' value='-60.696677999999999' />
          <semantic-value key='&quot;Trombetas&quot;' value='-72.416460000000001' />
          <semantic-value key='&quot;Turiamo&quot;' value='-67.846881999999994' />
          <semantic-value key='&quot;Tutunciftlik&quot;' value='29.747608' />
          <semantic-value key='&quot;Uzunkum&quot;' value='27.540198' />
          <semantic-value key='&quot;Vacamonte&quot;' value='-79.701948000000002' />
          <semantic-value key='&quot;Vaksdal&quot;' value='5.7711579999999998' />
          <semantic-value key='&quot;Vallvik&quot;' value='17.179285' />
          <semantic-value key='&quot;Victoria&quot;' value='-123.36634599999999' />
          <semantic-value key='&quot;Vila do Conde&quot;' value='-48.751131999999998' />
          <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='-7.4178949999999997' />
          <semantic-value key='&quot;Villequier&quot;' value='0.67171899999999996' />
          <semantic-value key='&quot;Villeta&quot;' value='-57.567346999999998' />
          <semantic-value key='&quot;Vinaroz&quot;' value='0.47689399999999998' />
          <semantic-value key='&quot;Vunda Point&quot;' value='177.38646299999999' />
          <semantic-value key='&quot;Whale Cay&quot;' value='-77.793935000000005' />
          <semantic-value key='&quot;Whampoa&quot;' value='113.431258' />
          <semantic-value key='&quot;Wilsons Beach&quot;' value='-66.939263999999994' />
          <semantic-value key='&quot;Xcalac&quot;' value='-87.836348000000001' />
          <semantic-value key='&quot;Xingang&quot;' value='117.708454' />
          <semantic-value key='&quot;Yandina&quot;' value='159.22081900000001' />
          <semantic-value key='&quot;Yantian&quot;' value='114.26788999999999' />
          <semantic-value key='&quot;Yarimca&quot;' value='29.752081' />
          <semantic-value key='&quot;Yarmouth Harbor&quot;' value='-1.5027360000000001' />
          <semantic-value key='&quot;Yarraville&quot;' value='144.89215899999999' />
          <semantic-value key='&quot;Yentai&quot;' value='121.448757' />
          <semantic-value key='&quot;Yerakini&quot;' value='23.443649000000001' />
          <semantic-value key='&quot;Yura&quot;' value='135.11632599999999' />
          <semantic-value key='&quot;Zeebrugge&quot;' value='3.2083650000000001' />
          <semantic-value key='&quot;Zirku Island&quot;' value='53.072591000000003' />
          <semantic-value key='&quot;Zwyndrecht&quot;' value='4.3362879999999997' />
        </semantic-values>
        <semantic-values semantic-role='[City].[Name]'>
          <semantic-value key='&quot;Attalea&quot;' value='&quot;Antalya&quot;' />
          <semantic-value key='&quot;Banjer Masin&quot;' value='&quot;Banjarmasin&quot;' />
          <semantic-value key='&quot;Bathurst&quot;' value='&quot;Banjul&quot;' />
          <semantic-value key='&quot;Belize&quot;' value='&quot;Belize City&quot;' />
          <semantic-value key='&quot;Big Creek&quot;' value='&quot;Big Creek&quot;' />
          <semantic-value key='&quot;Cheju&quot;' value='&quot;Jeju&quot;' />
          <semantic-value key='&quot;Chibako&quot;' value='&quot;Chiba&quot;' />
          <semantic-value key='&quot;Colombo Harbor&quot;' value='&quot;Colombo&quot;' />
          <semantic-value key='&quot;Derindje&quot;' value='&quot;Derince&quot;' />
          <semantic-value key='&quot;El Djazair&quot;' value='&quot;Algiers&quot;' />
          <semantic-value key='&quot;Freeport&quot;' value='&quot;Freeport&quot;' />
          <semantic-value key='&quot;Hull&quot;' value='&quot;Hull&quot;' />
          <semantic-value key='&quot;Jiangyin&quot;' value='&quot;Changzhou Shi&quot;' />
          <semantic-value key='&quot;Jinsen&quot;' value='&quot;Incheon&quot;' />
          <semantic-value key='&quot;Kanokawa&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
          <semantic-value key='&quot;Karachi Harbor&quot;' value='&quot;Karachi&quot;' />
          <semantic-value key='&quot;Khor al Ami&quot;' value='&quot;Kuwait City&quot;' />
          <semantic-value key='&quot;Kole Terminal&quot;' value='&quot;Douala&quot;' />
          <semantic-value key='&quot;Kristiansand S&quot;' value='&quot;Kristiansand&quot;' />
          <semantic-value key='&quot;Kunson&quot;' value='&quot;Gunsan&quot;' />
          <semantic-value key='&quot;La Coruna&quot;' value='&quot;Corunna&quot;' />
          <semantic-value key='&quot;Londonderry&quot;' value='&quot;Londonderry&quot;' />
          <semantic-value key='&quot;Military - Quingdau&quot;' value='&quot;Qingdao Shi&quot;' />
          <semantic-value key='&quot;Military - Yokohama&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
          <semantic-value key='&quot;Mina Dumyat&quot;' value='&quot;Damietta&quot;' />
          <semantic-value key='&quot;Mina Zayed&quot;' value='&quot;Dubai&quot;' />
          <semantic-value key='&quot;Mizusima&quot;' value='&quot;Toyama-shi&quot;' />
          <semantic-value key='&quot;Nanticoke&quot;' value='&quot;Nanticoke&quot;' />
          <semantic-value key='&quot;Ningpo&quot;' value='&quot;Ningbo Shi&quot;' />
          <semantic-value key='&quot;North Atlantic (Maine to Cape Hatteras)&quot;' value='&quot;Hatteras&quot;' />
          <semantic-value key='&quot;Pakhoi&quot;' value='&quot;Beihai Shi&quot;' />
          <semantic-value key='&quot;Panama Canal - Caribbean&quot;' value='&quot;Panama City&quot;' />
          <semantic-value key='&quot;Pandjang&quot;' value='&quot;Bandar Lampung&quot;' />
          <semantic-value key='&quot;Philipsburgh&quot;' value='&quot;Philipsburg&quot;' />
          <semantic-value key='&quot;Pinang&quot;' value='&quot;Penang&quot;' />
          <semantic-value key='&quot;Port Arthur&quot;' value='&quot;Dalian Shi&quot;' />
          <semantic-value key='&quot;Port Bustamante&quot;' value='&quot;Port Royal&quot;' />
          <semantic-value key='&quot;Port Lyttelton&quot;' value='&quot;Lyttelton&quot;' />
          <semantic-value key='&quot;Port Natal&quot;' value='&quot;Durban&quot;' />
          <semantic-value key='&quot;Port Qasim&quot;' value='&quot;Karachi&quot;' />
          <semantic-value key='&quot;Puduchcheri&quot;' value='&quot;Puducherry&quot;' />
          <semantic-value key='&quot;Puerto Manzanillo&quot;' value='&quot;Manzanillo&quot;' />
          <semantic-value key='&quot;Qinhuangdao Gang&quot;' value='&quot;Qinhuangdao Shi&quot;' />
          <semantic-value key='&quot;Santa Barbara de Samana&quot;' value='&quot;Samana&quot;' />
          <semantic-value key='&quot;Sluiskill&quot;' value='&quot;Sluiskil&quot;' />
          <semantic-value key='&quot;Songkhla Harbor&quot;' value='&quot;Songkhla&quot;' />
          <semantic-value key='&quot;Soo&quot;' value='&quot;Sault Ste. Marie&quot;' />
          <semantic-value key='&quot;Sriracha&quot;' value='&quot;Si Racha&quot;' />
          <semantic-value key='&quot;St. Croix&quot;' value='&quot;Saint Croix&quot;' />
          <semantic-value key='&quot;Sultan Qaboos&quot;' value='&quot;Muscat&quot;' />
          <semantic-value key='&quot;Swatow&quot;' value='&quot;Shantou Shi&quot;' />
          <semantic-value key='&quot;Tallinn&quot;' value='&quot;Tallinn&quot;' />
          <semantic-value key='&quot;Tanjung Priok&quot;' value='&quot;Tipar&quot;' />
          <semantic-value key='&quot;Tarakan Island&quot;' value='&quot;Tarakan&quot;' />
          <semantic-value key='&quot;Thanh Pho Ho Chi Minh&quot;' value='&quot;Ho Chi Minh City&quot;' />
          <semantic-value key='&quot;Tourane&quot;' value='&quot;Da Nang&quot;' />
          <semantic-value key='&quot;Toyohasi&quot;' value='&quot;Toyohashi-shi&quot;' />
          <semantic-value key='&quot;Trincomali&quot;' value='&quot;Trincomalee&quot;' />
          <semantic-value key='&quot;Valencia Harvor&quot;' value='&quot;Knightstown&quot;' />
          <semantic-value key='&quot;Vegesack&quot;' value='&quot;Bremen&quot;' />
          <semantic-value key='&quot;Villagarcia de Arosa&quot;' value='&quot;Vilagarcía de Arousa&quot;' />
          <semantic-value key='&quot;Vito&quot;' value='&quot;Manila&quot;' />
          <semantic-value key='&quot;Welshpool&quot;' value='&quot;Welshpool&quot;' />
          <semantic-value key='&quot;Ymuiden&quot;' value='&quot;IJmuiden&quot;' />
          <semantic-value key='&quot;Yumuri&quot;' value='&quot;Havana&quot;' />
          <semantic-value key='&quot;Yuzhnyy&quot;' value='&quot;Yuzhne&quot;' />
        </semantic-values>
      </column>
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.473404' measure-ordering='alphabetic' measure-percentage='0.526596' show-structure='true' />
      <semantic-values>
        <semantic-value key='[City].[Name]' value='%null%' />
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
    </datasource>
    <datasource caption='Sheet1 (economics-ocean-sectors_2005-2016)' inline='true' name='federated.1lqys0d04wao4z1e2mu8314nlk5k' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='economics-ocean-sectors_2005-2016' name='excel-direct.1fg7hzt1r1k21f19ln4x90hvwp7v'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/MTMAINZE/projects/project_74-savannah-harbor-narrative/savannah-harbor-narrative/data/economic-activity_ocean-dependent/economics-ocean-sectors_2005-2016.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1fg7hzt1r1k21f19ln4x90hvwp7v' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:N10001:no:A1:N10001:0' header='yes' outcome='2'>
            <column datatype='string' name='GeoId' ordinal='0' />
            <column datatype='string' name='County' ordinal='1' />
            <column datatype='string' name='State' ordinal='2' />
            <column datatype='string' name='RegionID' ordinal='3' />
            <column datatype='string' name='Region' ordinal='4' />
            <column datatype='string' name='GeoScale' ordinal='5' />
            <column datatype='integer' name='Year' ordinal='6' />
            <column datatype='integer' name='OceanSect_id' ordinal='7' />
            <column datatype='string' name='OceanSector' ordinal='8' />
            <column datatype='integer' name='Establishments' ordinal='9' />
            <column datatype='integer' name='Employment' ordinal='10' />
            <column datatype='integer' name='wages' ordinal='11' />
            <column datatype='integer' name='GDP' ordinal='12' />
            <column datatype='integer' name='Real_GDP' ordinal='13' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>GeoId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GeoId]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GeoId</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>County</remote-name>
            <remote-type>130</remote-type>
            <local-name>[County]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>County</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RegionID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[RegionID]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>RegionID</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GeoScale</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GeoScale]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GeoScale</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OceanSect_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OceanSect_id]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>OceanSect_id</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OceanSector</remote-name>
            <remote-type>130</remote-type>
            <local-name>[OceanSector]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>OceanSector</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Establishments</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Establishments]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Establishments</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Employment</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Employment]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Employment</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wages</remote-name>
            <remote-type>20</remote-type>
            <local-name>[wages]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>wages</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GDP</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Real_GDP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Real_GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Real_GDP</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:N10001:no:A1:N10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[County]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
      <column caption='Geo Id' datatype='string' name='[GeoId]' role='dimension' type='nominal' />
      <column caption='Geo Scale' datatype='string' name='[GeoScale]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='OceanSect id' datatype='integer' name='[OceanSect_id]' role='dimension' type='ordinal' />
      <column caption='Ocean Sector' datatype='string' name='[OceanSector]' role='dimension' type='nominal' />
      <column caption='Real GDP' datatype='integer' name='[Real_GDP]' role='measure' type='quantitative' />
      <column caption='Region ID' datatype='string' name='[RegionID]' role='dimension' type='nominal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column aggregation='Sum' datatype='integer' name='[Year]' role='dimension' type='ordinal' />
      <column caption='Wages' datatype='integer' name='[wages]' role='measure' type='quantitative' />
      <column-instance column='[OceanSector]' derivation='None' name='[none:OceanSector:nk]' pivot='key' type='nominal' />
      <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.515493' measure-ordering='alphabetic' measure-percentage='0.484507' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:State:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;IL&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;WA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AK&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;NY&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;DE&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;RI&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;MD&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;IN&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;WI&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;FL&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;SC&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;NH&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AL&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;OH&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MS&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;GA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;TX&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;ME&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;MI&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;NC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;NJ&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LA&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;HI&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;VA&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CA&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;OR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;MN&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;MA&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CT&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;PA&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:OceanSector:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;All Ocean Sectors&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Offshore Mineral Extraction&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Marine Transportation&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tourism and Recreation&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marine Construction&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Ship and Boat Building&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Living Resources&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[County].[Name]' value='%null%' />
      </semantic-values>
    </datasource>
    <datasource caption='path-sample' inline='true' name='federated.1myyjzn0glxi9g1eljed60yf5uon' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='path-sample' name='ogrdirect.0g5j2pt0wkv81y1fimr0v01hkmpx'>
            <connection class='ogrdirect' directory='C:/Users/MTMAINZE/projects/project_74-savannah-harbor-narrative/savannah-harbor-narrative/data/unlading-data' filename='path-sample.geojson' ogr-grid-shift-folder='C:\Program Files\Tableau\Tableau 2019.1\local\proj4' password='' server='' tablename='' />
          </named-connection>
        </named-connections>
        <relation connection='ogrdirect.0g5j2pt0wkv81y1fimr0v01hkmpx' name='path-sample.geojson' table='[path-sample.geojson]' type='table'>
          <columns>
            <column datatype='string' name='id' ordinal='0' />
            <column datatype='string' name='origin' ordinal='1' />
            <column datatype='string' name='destination' ordinal='2' />
            <column datatype='spatial' name='Geometry' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[path-sample.geojson]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>origin</remote-name>
            <remote-type>129</remote-type>
            <local-name>[origin]</local-name>
            <parent-name>[path-sample.geojson]</parent-name>
            <remote-alias>origin</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>destination</remote-name>
            <remote-type>129</remote-type>
            <local-name>[destination]</local-name>
            <parent-name>[path-sample.geojson]</parent-name>
            <remote-alias>destination</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geometry</remote-name>
            <remote-type>8</remote-type>
            <local-name>[Geometry]</local-name>
            <parent-name>[path-sample.geojson]</parent-name>
            <remote-alias>Geometry</remote-alias>
            <ordinal>3</ordinal>
            <local-type>spatial</local-type>
            <aggregation>Collect</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Destination' datatype='string' name='[destination]' role='dimension' type='nominal' />
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal' />
      <column caption='Origin' datatype='string' name='[origin]' role='dimension' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.485636' measure-ordering='alphabetic' measure-percentage='0.514364' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='savannah-metros-routes' inline='true' name='federated.0vcwl910s6j1nn16ssfew0dp7rbd' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='savannah-metros-routes' name='ogrdirect.1g7rhpb1sjeh990zt4hmq16olda9'>
            <connection class='ogrdirect' directory='C:/Users/MTMAINZE/projects/project_74-savannah-harbor-narrative/savannah-harbor-narrative/data' filename='savannah-metros-routes.geojson' ogr-grid-shift-folder='C:\Program Files\Tableau\Tableau 2019.1\local\proj4' password='' server='' tablename='' />
          </named-connection>
        </named-connections>
        <relation connection='ogrdirect.1g7rhpb1sjeh990zt4hmq16olda9' name='savannah-metros-routes.geojson' table='[savannah-metros-routes.geojson]' type='table'>
          <columns>
            <column datatype='string' name='city' ordinal='0' />
            <column datatype='real' name='seconds' ordinal='1' />
            <column datatype='real' name='minutes' ordinal='2' />
            <column datatype='real' name='hours' ordinal='3' />
            <column datatype='spatial' name='Geometry' ordinal='4' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>city</remote-name>
            <remote-type>129</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[savannah-metros-routes.geojson]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>seconds</remote-name>
            <remote-type>5</remote-type>
            <local-name>[seconds]</local-name>
            <parent-name>[savannah-metros-routes.geojson]</parent-name>
            <remote-alias>seconds</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>minutes</remote-name>
            <remote-type>5</remote-type>
            <local-name>[minutes]</local-name>
            <parent-name>[savannah-metros-routes.geojson]</parent-name>
            <remote-alias>minutes</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hours</remote-name>
            <remote-type>5</remote-type>
            <local-name>[hours]</local-name>
            <parent-name>[savannah-metros-routes.geojson]</parent-name>
            <remote-alias>hours</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geometry</remote-name>
            <remote-type>8</remote-type>
            <local-name>[Geometry]</local-name>
            <parent-name>[savannah-metros-routes.geojson]</parent-name>
            <remote-alias>Geometry</remote-alias>
            <ordinal>4</ordinal>
            <local-type>spatial</local-type>
            <aggregation>Collect</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Hours' datatype='real' name='[hours]' role='measure' type='quantitative' />
      <column caption='Minutes' datatype='real' name='[minutes]' role='measure' type='quantitative' />
      <column caption='Seconds' datatype='real' name='[seconds]' role='measure' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.411268' measure-ordering='alphabetic' measure-percentage='0.588732' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='2018-containers-bar'>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='2018 TEU' datatype='integer' default-format='n0,,.00M;-0,,.00M' name='[Calculation_870602134463655936]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Year] = 2018 THEN [Total]&#13;&#10;else null&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_870602134463655936]' derivation='Sum' name='[sum:Calculation_870602134463655936:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Calculation_870602134463655936:qk]</rows>
        <cols />
      </table>
      <simple-id uuid='{2F96987A-045C-4035-8A17-DFEF38F1D91A}' />
    </worksheet>
    <worksheet name='2018-containers-sign'>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='2018 TEU' datatype='integer' default-format='n0,,.00M;-0,,.00M' name='[Calculation_870602134463655936]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Year] = 2018 THEN [Total]&#13;&#10;else null&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_870602134463655936]' derivation='Sum' name='[sum:Calculation_870602134463655936:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='553' />
            <format attr='height' value='276' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Calculation_870602134463655936:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run fontsize='64'>&lt;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Calculation_870602134463655936:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontsize='32'>standard shipping containers</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{CE8A19A6-BF43-4EF5-82D3-69952171E656}' />
    </worksheet>
    <worksheet name='containers-total-03-08'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Combined imports and exports of TEUs (twenty-foot-equivalent-unit, i.e., standard container)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
            </column>
            <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total]' derivation='Sum' name='[pcdf:sum:Total:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_428967894022410242]' derivation='Year' name='[yr:Calculation_428967894022410242:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]' included-values='in-range'>
            <min>2003</min>
            <max>2008</max>
          </filter>
          <slices>
            <column>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[pcdf:sum:Total:qk]' />
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[yr:Calculation_428967894022410242:ok]</cols>
      </table>
      <simple-id uuid='{2F4AA62C-4AEE-4657-80E1-FFB13E868EF8}' />
    </worksheet>
    <worksheet name='containers-total-03-18'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Combined imports and exports of TEUs (twenty-foot-equivalent-unit, i.e., standard container)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
            </column>
            <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total]' derivation='Sum' name='[pcdf:sum:Total:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_428967894022410242]' derivation='Year' name='[yr:Calculation_428967894022410242:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]' included-values='in-range'>
            <min>2003</min>
            <max>2018</max>
          </filter>
          <slices>
            <column>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[pcdf:sum:Total:qk]' />
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[yr:Calculation_428967894022410242:ok]</cols>
      </table>
      <simple-id uuid='{C07897E2-BB19-4BFC-80C9-F58528493EBB}' />
    </worksheet>
    <worksheet name='containers-total-03-19'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Combined imports and exports of TEUs (twenty-foot-equivalent-unit, i.e., standard container)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
            </column>
            <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Status]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_428967894022410242]' derivation='Year' name='[yr:Calculation_428967894022410242:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[yr:Calculation_428967894022410242:ok]</cols>
      </table>
      <simple-id uuid='{E230C6B5-A1F2-4F32-8BB0-64DB11E86E7F}' />
    </worksheet>
    <worksheet name='filler'>
      <table>
        <view>
          <datasources>
            <datasource caption='path-sample' name='federated.1myyjzn0glxi9g1eljed60yf5uon' />
          </datasources>
          <datasource-dependencies datasource='federated.1myyjzn0glxi9g1eljed60yf5uon'>
            <column-instance column='[origin]' derivation='None' name='[none:origin:nk]' pivot='key' type='nominal' />
            <column caption='Origin' datatype='string' name='[origin]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='442' />
            <format attr='height' value='166' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1myyjzn0glxi9g1eljed60yf5uon].[none:origin:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run fontalignment='0' fontsize='11'>Narrative turns into the actual shipping process animation here, where each story point focuses on the workforce present at each step in the process.</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{92D4D0CE-D30E-4F89-8D89-51BABB8BA445}' />
    </worksheet>
    <worksheet name='foreign-ports-lading'>
      <table>
        <view>
          <datasources>
            <datasource caption='port-of-lading-summary (savannah-unlading_2014-2018)' name='federated.1phuvdy1lq0m8w1h3bhw90cfl96s' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1phuvdy1lq0m8w1h3bhw90cfl96s'>
            <column datatype='string' name='[Country of Lading]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;China (Mainland)&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Fiji Islands&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;Netherland Antilles&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;St. Vincent &amp; Northern Grenadines&quot;' value='&quot;Saint Vincent and the Grenadines&quot;' />
                <semantic-value key='&quot;Venezuala&quot;' value='&quot;Venezuela&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Port of Lading]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='62.472119999999997' />
                <semantic-value key='&quot;Apapa&quot;' value='6.4554280000000004' />
                <semantic-value key='&quot;Aratu&quot;' value='-12.778541000000001' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='11.776904' />
                <semantic-value key='&quot;Bangor&quot;' value='53.227094999999998' />
                <semantic-value key='&quot;Barcadera&quot;' value='12.48315' />
                <semantic-value key='&quot;Bassens&quot;' value='44.907451999999999' />
                <semantic-value key='&quot;Bei Jao&quot;' value='22.928619000000001' />
                <semantic-value key='&quot;Beilun&quot;' value='29.906571' />
                <semantic-value key='&quot;Bell Bay&quot;' value='-41.13308' />
                <semantic-value key='&quot;Boca Chica&quot;' value='18.452537' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='42.934216999999997' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='8.4896419999999999' />
                <semantic-value key='&quot;Caucedo&quot;' value='18.425775000000002' />
                <semantic-value key='&quot;Chiwan&quot;' value='22.460884' />
                <semantic-value key='&quot;Constantza&quot;' value='44.162775000000003' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='45.863187000000003' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='19.082697' />
                <semantic-value key='&quot;El Dekheila&quot;' value='31.125387' />
                <semantic-value key='&quot;Escombreras&quot;' value='37.559161000000003' />
                <semantic-value key='&quot;Fremantle&quot;' value='-32.057139999999997' />
                <semantic-value key='&quot;Fuzhou&quot;' value='26.057061000000001' />
                <semantic-value key='&quot;Gevle&quot;' value='60.676642000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='36.042090000000002' />
                <semantic-value key='&quot;Hakata&quot;' value='33.610410000000002' />
                <semantic-value key='&quot;Hirohata&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='55.608159999999998' />
                <semantic-value key='&quot;Itajay&quot;' value='-26.912541000000001' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='24.987984999999998' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='33.155647999999999' />
                <semantic-value key='&quot;Judda&quot;' value='21.494458000000002' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='22.673974000000001' />
                <semantic-value key='&quot;Kemlik&quot;' value='39.976376000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='25.353408000000002' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='26.474426000000001' />
                <semantic-value key='&quot;Kingston&quot;' value='44.230178000000002' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='43.388568999999997' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-11.920743' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='13.101851999999999' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='9.0482990000000001' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='17.954609999999999' />
                <semantic-value key='&quot;Luda&quot;' value='22.310763999999999' />
                <semantic-value key='&quot;Mahahual&quot;' value='18.715810000000001' />
                <semantic-value key='&quot;Mamonal&quot;' value='10.312326000000001' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='2.996632' />
                <semantic-value key='&quot;Moin&quot;' value='9.9924759999999999' />
                <semantic-value key='&quot;Moji&quot;' value='33.911963' />
                <semantic-value key='&quot;Mosel&quot;' value='43.268963999999997' />
                <semantic-value key='&quot;Munguba&quot;' value='-0.91625999999999996' />
                <semantic-value key='&quot;Mylaki&quot;' value='38.38353' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='35.084313999999999' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='38.744047000000002' />
                <semantic-value key='&quot;New Mangalore&quot;' value='12.947471999999999' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='18.949912999999999' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='18.407342' />
                <semantic-value key='&quot;Pajaritos&quot;' value='20.557535000000001' />
                <semantic-value key='&quot;Panderma&quot;' value='40.353513' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='1.4660839999999999' />
                <semantic-value key='&quot;Penarth&quot;' value='51.445248999999997' />
                <semantic-value key='&quot;Piraievs&quot;' value='37.943368999999997' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='36.029528999999997' />
                <semantic-value key='&quot;Point Lisas&quot;' value='10.407755999999999' />
                <semantic-value key='&quot;Point Tupper&quot;' value='45.606653000000001' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='10.31551' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-3.5521180000000001' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='17.893920999999999' />
                <semantic-value key='&quot;Port Kembla&quot;' value='-34.486659000000003' />
                <semantic-value key='&quot;Port Rashid&quot;' value='25.284811999999999' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='2.9986890000000002' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='41.183098000000001' />
                <semantic-value key='&quot;Portocel&quot;' value='-19.840129999999998' />
                <semantic-value key='&quot;Progreso&quot;' value='21.279890999999999' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='12.219196' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-36.715183000000003' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='13.404448' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='7.9043239999999999' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-2.283944' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='13.929124' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='9.7312200000000004' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='1.234464' />
                <semantic-value key='&quot;Punta Morales&quot;' value='10.067382' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='36.992193999999998' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='28.428712999999998' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='51.830506999999997' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='18.600787' />
                <semantic-value key='&quot;Ruwais&quot;' value='24.109658' />
                <semantic-value key='&quot;Samarai&quot;' value='-10.612055' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='43.587783000000002' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-32.747911000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='10.385949' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-2.4248539999999998' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='37.101041000000002' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='15.690427' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-2.5393650000000001' />
                <semantic-value key='&quot;Sarnia&quot;' value='42.974594000000003' />
                <semantic-value key='&quot;Saupe&quot;' value='-12.738681' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='18.229755000000001' />
                <semantic-value key='&quot;Selangor&quot;' value='3.3391470000000001' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-22.986329000000001' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='1.3974340000000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='44.455103000000001' />
                <semantic-value key='&quot;Shekou&quot;' value='22.481929000000001' />
                <semantic-value key='&quot;Shellhaven&quot;' value='51.512303000000003' />
                <semantic-value key='&quot;Shilong&quot;' value='23.105274999999999' />
                <semantic-value key='&quot;Simizu&quot;' value='35.098028999999997' />
                <semantic-value key='&quot;Sinoe&quot;' value='5.0250640000000004' />
                <semantic-value key='&quot;South Riding Point&quot;' value='26.625854' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-62.207858999999999' />
                <semantic-value key='&quot;Southhampton&quot;' value='50.909450999999997' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='18.429884999999999' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='52.054468' />
                <semantic-value key='&quot;St. Martin&quot;' value='18.081091000000001' />
                <semantic-value key='&quot;Stadersand&quot;' value='53.620538000000003' />
                <semantic-value key='&quot;Subic Bay&quot;' value='14.791409' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='1.3399970000000001' />
                <semantic-value key='&quot;Surabaya&quot;' value='-7.2595929999999997' />
                <semantic-value key='&quot;Susaka&quot;' value='44.508685' />
                <semantic-value key='&quot;Taichung&quot;' value='24.139690999999999' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='1.362382' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='1.0615289999999999' />
                <semantic-value key='&quot;Teesport&quot;' value='54.610365999999999' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='-0.99244399999999999' />
                <semantic-value key='&quot;Tema&quot;' value='5.7346950000000003' />
                <semantic-value key='&quot;Tilbury&quot;' value='51.462698000000003' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='6.4314200000000001' />
                <semantic-value key='&quot;Tobago&quot;' value='11.232821' />
                <semantic-value key='&quot;Trombetas&quot;' value='-7.399667' />
                <semantic-value key='&quot;Turiamo&quot;' value='10.442997999999999' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='40.761786999999998' />
                <semantic-value key='&quot;Uzunkum&quot;' value='37.817354999999999' />
                <semantic-value key='&quot;Vacamonte&quot;' value='8.910425' />
                <semantic-value key='&quot;Vaksdal&quot;' value='60.578510000000001' />
                <semantic-value key='&quot;Vallvik&quot;' value='61.184803000000002' />
                <semantic-value key='&quot;Victoria&quot;' value='48.428511999999998' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-1.5419860000000001' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='37.194201999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='49.512703000000002' />
                <semantic-value key='&quot;Villeta&quot;' value='-25.507593' />
                <semantic-value key='&quot;Vinaroz&quot;' value='40.468581' />
                <semantic-value key='&quot;Vunda Point&quot;' value='-17.680088000000001' />
                <semantic-value key='&quot;Whale Cay&quot;' value='25.403051999999999' />
                <semantic-value key='&quot;Whampoa&quot;' value='23.084468999999999' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='44.932456999999999' />
                <semantic-value key='&quot;Xcalac&quot;' value='18.271056000000002' />
                <semantic-value key='&quot;Xingang&quot;' value='39.002934000000003' />
                <semantic-value key='&quot;Yandina&quot;' value='-9.0795949999999994' />
                <semantic-value key='&quot;Yantian&quot;' value='22.589849000000001' />
                <semantic-value key='&quot;Yarimca&quot;' value='40.764625000000002' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='50.705174' />
                <semantic-value key='&quot;Yarraville&quot;' value='-37.817494000000003' />
                <semantic-value key='&quot;Yentai&quot;' value='37.472777999999998' />
                <semantic-value key='&quot;Yerakini&quot;' value='40.278911000000001' />
                <semantic-value key='&quot;Yura&quot;' value='33.972456999999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='51.319737000000003' />
                <semantic-value key='&quot;Zirku Island&quot;' value='24.879750000000001' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='51.215713999999998' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='6.1499079999999999' />
                <semantic-value key='&quot;Apapa&quot;' value='3.3646500000000001' />
                <semantic-value key='&quot;Aratu&quot;' value='-38.497734999999999' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='-70.242108000000002' />
                <semantic-value key='&quot;Bangor&quot;' value='-4.1282629999999996' />
                <semantic-value key='&quot;Barcadera&quot;' value='-69.990280999999996' />
                <semantic-value key='&quot;Bassens&quot;' value='-0.52819300000000002' />
                <semantic-value key='&quot;Bei Jao&quot;' value='113.208045' />
                <semantic-value key='&quot;Beilun&quot;' value='121.838385' />
                <semantic-value key='&quot;Bell Bay&quot;' value='146.85897800000001' />
                <semantic-value key='&quot;Boca Chica&quot;' value='-69.607164999999995' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='131.401184' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='124.620439' />
                <semantic-value key='&quot;Caucedo&quot;' value='-69.630825999999999' />
                <semantic-value key='&quot;Chiwan&quot;' value='113.88923' />
                <semantic-value key='&quot;Constantza&quot;' value='28.636849000000002' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='-73.251276000000004' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='-96.146985000000001' />
                <semantic-value key='&quot;El Dekheila&quot;' value='29.812021999999999' />
                <semantic-value key='&quot;Escombreras&quot;' value='-0.96923999999999999' />
                <semantic-value key='&quot;Fremantle&quot;' value='115.743172' />
                <semantic-value key='&quot;Fuzhou&quot;' value='119.296423' />
                <semantic-value key='&quot;Gevle&quot;' value='17.142924000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='14.252424' />
                <semantic-value key='&quot;Hakata&quot;' value='130.40307999999999' />
                <semantic-value key='&quot;Hirohata&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='-4.6887319999999999' />
                <semantic-value key='&quot;Itajay&quot;' value='-48.667282999999998' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='55.022581000000002' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='-8.6227920000000005' />
                <semantic-value key='&quot;Judda&quot;' value='39.171382999999999' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='120.280269' />
                <semantic-value key='&quot;Kemlik&quot;' value='32.583550000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='56.358727999999999' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='50.192681' />
                <semantic-value key='&quot;Kingston&quot;' value='-76.488794999999996' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='5.0305689999999998' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-77.140218000000004' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='100.913264' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='-82.081196000000006' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='-102.191582' />
                <semantic-value key='&quot;Luda&quot;' value='114.191295' />
                <semantic-value key='&quot;Mahahual&quot;' value='-87.707537000000002' />
                <semantic-value key='&quot;Mamonal&quot;' value='-75.501333000000002' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='101.394172' />
                <semantic-value key='&quot;Moin&quot;' value='-83.094492000000002' />
                <semantic-value key='&quot;Moji&quot;' value='130.97021000000001' />
                <semantic-value key='&quot;Mosel&quot;' value='-2.9347590000000001' />
                <semantic-value key='&quot;Munguba&quot;' value='-52.44744' />
                <semantic-value key='&quot;Mylaki&quot;' value='24.061402000000001' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='136.883848' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='26.833552999999998' />
                <semantic-value key='&quot;New Mangalore&quot;' value='74.817625000000007' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='72.951025000000001' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='-77.105808999999994' />
                <semantic-value key='&quot;Pajaritos&quot;' value='-97.474902' />
                <semantic-value key='&quot;Panderma&quot;' value='27.968993999999999' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='103.87198600000001' />
                <semantic-value key='&quot;Penarth&quot;' value='-3.1672250000000002' />
                <semantic-value key='&quot;Piraievs&quot;' value='23.643711' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='129.37716399999999' />
                <semantic-value key='&quot;Point Lisas&quot;' value='-61.492524000000003' />
                <semantic-value key='&quot;Point Tupper&quot;' value='-61.352902' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='-61.458786000000003' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-38.831755999999999' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='-77.132018000000002' />
                <semantic-value key='&quot;Port Kembla&quot;' value='150.90251900000001' />
                <semantic-value key='&quot;Port Rashid&quot;' value='55.278204000000002' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='101.391769' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='-8.7028839999999992' />
                <semantic-value key='&quot;Portocel&quot;' value='-40.057651' />
                <semantic-value key='&quot;Progreso&quot;' value='-89.664766' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='-71.999690000000001' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-72.981358' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='-87.429236000000003' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='-67.478913000000006' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-78.897141000000005' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='-90.761673999999999' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='-82.814772000000005' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='103.762342' />
                <semantic-value key='&quot;Punta Morales&quot;' value='-84.948671000000004' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='127.085368' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='48.49053' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='-8.3211759999999995' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='-70.147318999999996' />
                <semantic-value key='&quot;Ruwais&quot;' value='52.721159999999998' />
                <semantic-value key='&quot;Samarai&quot;' value='150.66402099999999' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='-5.9356070000000001' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-60.734498000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='123.65241' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-54.714204000000002' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='15.269824' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='-88.620148999999998' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-44.286963' />
                <semantic-value key='&quot;Sarnia&quot;' value='-82.411687999999998' />
                <semantic-value key='&quot;Saupe&quot;' value='-38.612997' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='-78.139852000000005' />
                <semantic-value key='&quot;Selangor&quot;' value='101.560378' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-43.693316000000003' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='103.94113400000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='-63.674892' />
                <semantic-value key='&quot;Shekou&quot;' value='113.919675' />
                <semantic-value key='&quot;Shellhaven&quot;' value='0.50248700000000002' />
                <semantic-value key='&quot;Shilong&quot;' value='113.874206' />
                <semantic-value key='&quot;Simizu&quot;' value='138.89828600000001' />
                <semantic-value key='&quot;Sinoe&quot;' value='-9.0406259999999996' />
                <semantic-value key='&quot;South Riding Point&quot;' value='-78.230118000000004' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-58.691121000000003' />
                <semantic-value key='&quot;Southhampton&quot;' value='-1.403246' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='-77.199562999999998' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='4.5436209999999999' />
                <semantic-value key='&quot;St. Martin&quot;' value='-63.050814000000003' />
                <semantic-value key='&quot;Stadersand&quot;' value='9.5289560000000009' />
                <semantic-value key='&quot;Subic Bay&quot;' value='120.24220699999999' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='102.13534199999999' />
                <semantic-value key='&quot;Surabaya&quot;' value='112.754603' />
                <semantic-value key='&quot;Susaka&quot;' value='14.306426' />
                <semantic-value key='&quot;Taichung&quot;' value='120.661964' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='103.553287' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='104.220911' />
                <semantic-value key='&quot;Teesport&quot;' value='-1.1508910000000001' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='100.383875' />
                <semantic-value key='&quot;Tema&quot;' value='0.031449999999999999' />
                <semantic-value key='&quot;Tilbury&quot;' value='0.36106100000000002' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='3.3436370000000002' />
                <semantic-value key='&quot;Tobago&quot;' value='-60.696677999999999' />
                <semantic-value key='&quot;Trombetas&quot;' value='-72.416460000000001' />
                <semantic-value key='&quot;Turiamo&quot;' value='-67.846881999999994' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='29.747608' />
                <semantic-value key='&quot;Uzunkum&quot;' value='27.540198' />
                <semantic-value key='&quot;Vacamonte&quot;' value='-79.701948000000002' />
                <semantic-value key='&quot;Vaksdal&quot;' value='5.7711579999999998' />
                <semantic-value key='&quot;Vallvik&quot;' value='17.179285' />
                <semantic-value key='&quot;Victoria&quot;' value='-123.36634599999999' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-48.751131999999998' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='-7.4178949999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='0.67171899999999996' />
                <semantic-value key='&quot;Villeta&quot;' value='-57.567346999999998' />
                <semantic-value key='&quot;Vinaroz&quot;' value='0.47689399999999998' />
                <semantic-value key='&quot;Vunda Point&quot;' value='177.38646299999999' />
                <semantic-value key='&quot;Whale Cay&quot;' value='-77.793935000000005' />
                <semantic-value key='&quot;Whampoa&quot;' value='113.431258' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='-66.939263999999994' />
                <semantic-value key='&quot;Xcalac&quot;' value='-87.836348000000001' />
                <semantic-value key='&quot;Xingang&quot;' value='117.708454' />
                <semantic-value key='&quot;Yandina&quot;' value='159.22081900000001' />
                <semantic-value key='&quot;Yantian&quot;' value='114.26788999999999' />
                <semantic-value key='&quot;Yarimca&quot;' value='29.752081' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='-1.5027360000000001' />
                <semantic-value key='&quot;Yarraville&quot;' value='144.89215899999999' />
                <semantic-value key='&quot;Yentai&quot;' value='121.448757' />
                <semantic-value key='&quot;Yerakini&quot;' value='23.443649000000001' />
                <semantic-value key='&quot;Yura&quot;' value='135.11632599999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='3.2083650000000001' />
                <semantic-value key='&quot;Zirku Island&quot;' value='53.072591000000003' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='4.3362879999999997' />
              </semantic-values>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Attalea&quot;' value='&quot;Antalya&quot;' />
                <semantic-value key='&quot;Banjer Masin&quot;' value='&quot;Banjarmasin&quot;' />
                <semantic-value key='&quot;Bathurst&quot;' value='&quot;Banjul&quot;' />
                <semantic-value key='&quot;Belize&quot;' value='&quot;Belize City&quot;' />
                <semantic-value key='&quot;Big Creek&quot;' value='&quot;Big Creek&quot;' />
                <semantic-value key='&quot;Cheju&quot;' value='&quot;Jeju&quot;' />
                <semantic-value key='&quot;Chibako&quot;' value='&quot;Chiba&quot;' />
                <semantic-value key='&quot;Colombo Harbor&quot;' value='&quot;Colombo&quot;' />
                <semantic-value key='&quot;Derindje&quot;' value='&quot;Derince&quot;' />
                <semantic-value key='&quot;El Djazair&quot;' value='&quot;Algiers&quot;' />
                <semantic-value key='&quot;Freeport&quot;' value='&quot;Freeport&quot;' />
                <semantic-value key='&quot;Hull&quot;' value='&quot;Hull&quot;' />
                <semantic-value key='&quot;Jiangyin&quot;' value='&quot;Changzhou Shi&quot;' />
                <semantic-value key='&quot;Jinsen&quot;' value='&quot;Incheon&quot;' />
                <semantic-value key='&quot;Kanokawa&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Karachi Harbor&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Khor al Ami&quot;' value='&quot;Kuwait City&quot;' />
                <semantic-value key='&quot;Kole Terminal&quot;' value='&quot;Douala&quot;' />
                <semantic-value key='&quot;Kristiansand S&quot;' value='&quot;Kristiansand&quot;' />
                <semantic-value key='&quot;Kunson&quot;' value='&quot;Gunsan&quot;' />
                <semantic-value key='&quot;La Coruna&quot;' value='&quot;Corunna&quot;' />
                <semantic-value key='&quot;Londonderry&quot;' value='&quot;Londonderry&quot;' />
                <semantic-value key='&quot;Military - Quingdau&quot;' value='&quot;Qingdao Shi&quot;' />
                <semantic-value key='&quot;Military - Yokohama&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Mina Dumyat&quot;' value='&quot;Damietta&quot;' />
                <semantic-value key='&quot;Mina Zayed&quot;' value='&quot;Dubai&quot;' />
                <semantic-value key='&quot;Mizusima&quot;' value='&quot;Toyama-shi&quot;' />
                <semantic-value key='&quot;Nanticoke&quot;' value='&quot;Nanticoke&quot;' />
                <semantic-value key='&quot;Ningpo&quot;' value='&quot;Ningbo Shi&quot;' />
                <semantic-value key='&quot;North Atlantic (Maine to Cape Hatteras)&quot;' value='&quot;Hatteras&quot;' />
                <semantic-value key='&quot;Pakhoi&quot;' value='&quot;Beihai Shi&quot;' />
                <semantic-value key='&quot;Panama Canal - Caribbean&quot;' value='&quot;Panama City&quot;' />
                <semantic-value key='&quot;Pandjang&quot;' value='&quot;Bandar Lampung&quot;' />
                <semantic-value key='&quot;Philipsburgh&quot;' value='&quot;Philipsburg&quot;' />
                <semantic-value key='&quot;Pinang&quot;' value='&quot;Penang&quot;' />
                <semantic-value key='&quot;Port Arthur&quot;' value='&quot;Dalian Shi&quot;' />
                <semantic-value key='&quot;Port Bustamante&quot;' value='&quot;Port Royal&quot;' />
                <semantic-value key='&quot;Port Lyttelton&quot;' value='&quot;Lyttelton&quot;' />
                <semantic-value key='&quot;Port Natal&quot;' value='&quot;Durban&quot;' />
                <semantic-value key='&quot;Port Qasim&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Puduchcheri&quot;' value='&quot;Puducherry&quot;' />
                <semantic-value key='&quot;Puerto Manzanillo&quot;' value='&quot;Manzanillo&quot;' />
                <semantic-value key='&quot;Qinhuangdao Gang&quot;' value='&quot;Qinhuangdao Shi&quot;' />
                <semantic-value key='&quot;Santa Barbara de Samana&quot;' value='&quot;Samana&quot;' />
                <semantic-value key='&quot;Sluiskill&quot;' value='&quot;Sluiskil&quot;' />
                <semantic-value key='&quot;Songkhla Harbor&quot;' value='&quot;Songkhla&quot;' />
                <semantic-value key='&quot;Soo&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;Sriracha&quot;' value='&quot;Si Racha&quot;' />
                <semantic-value key='&quot;St. Croix&quot;' value='&quot;Saint Croix&quot;' />
                <semantic-value key='&quot;Sultan Qaboos&quot;' value='&quot;Muscat&quot;' />
                <semantic-value key='&quot;Swatow&quot;' value='&quot;Shantou Shi&quot;' />
                <semantic-value key='&quot;Tallinn&quot;' value='&quot;Tallinn&quot;' />
                <semantic-value key='&quot;Tanjung Priok&quot;' value='&quot;Tipar&quot;' />
                <semantic-value key='&quot;Tarakan Island&quot;' value='&quot;Tarakan&quot;' />
                <semantic-value key='&quot;Thanh Pho Ho Chi Minh&quot;' value='&quot;Ho Chi Minh City&quot;' />
                <semantic-value key='&quot;Tourane&quot;' value='&quot;Da Nang&quot;' />
                <semantic-value key='&quot;Toyohasi&quot;' value='&quot;Toyohashi-shi&quot;' />
                <semantic-value key='&quot;Trincomali&quot;' value='&quot;Trincomalee&quot;' />
                <semantic-value key='&quot;Valencia Harvor&quot;' value='&quot;Knightstown&quot;' />
                <semantic-value key='&quot;Vegesack&quot;' value='&quot;Bremen&quot;' />
                <semantic-value key='&quot;Villagarcia de Arosa&quot;' value='&quot;Vilagarcía de Arousa&quot;' />
                <semantic-value key='&quot;Vito&quot;' value='&quot;Manila&quot;' />
                <semantic-value key='&quot;Welshpool&quot;' value='&quot;Welshpool&quot;' />
                <semantic-value key='&quot;Ymuiden&quot;' value='&quot;IJmuiden&quot;' />
                <semantic-value key='&quot;Yumuri&quot;' value='&quot;Havana&quot;' />
                <semantic-value key='&quot;Yuzhnyy&quot;' value='&quot;Yuzhne&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country of Lading]' derivation='None' name='[none:Country of Lading:nk]' pivot='key' type='nominal' />
            <column-instance column='[Port of Lading]' derivation='None' name='[none:Port of Lading:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;Aabenraa&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Nombre de Dios&quot;' />
              <groupfilter from='&quot;Noumea&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Zwyndrecht&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Longitude (generated)]' field-type='quantitative' max='23532428.147540297' min='-18673649.508196719' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Latitude (generated)]' field-type='quantitative' max='12650324.324331859' min='-8937046.5422090385' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]' />
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Latitude (generated)]</rows>
        <cols>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{55FF99F1-D574-49AF-BF84-936AAB4A75F3}' />
    </worksheet>
    <worksheet name='foreign-ports-lading-containers'>
      <table>
        <view>
          <datasources>
            <datasource caption='port-of-lading-summary (savannah-unlading_2014-2018)' name='federated.1phuvdy1lq0m8w1h3bhw90cfl96s' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1phuvdy1lq0m8w1h3bhw90cfl96s'>
            <column datatype='integer' name='[Containers]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country of Lading]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;China (Mainland)&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Fiji Islands&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;Netherland Antilles&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;St. Vincent &amp; Northern Grenadines&quot;' value='&quot;Saint Vincent and the Grenadines&quot;' />
                <semantic-value key='&quot;Venezuala&quot;' value='&quot;Venezuela&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Port of Lading]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='62.472119999999997' />
                <semantic-value key='&quot;Apapa&quot;' value='6.4554280000000004' />
                <semantic-value key='&quot;Aratu&quot;' value='-12.778541000000001' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='11.776904' />
                <semantic-value key='&quot;Bangor&quot;' value='53.227094999999998' />
                <semantic-value key='&quot;Barcadera&quot;' value='12.48315' />
                <semantic-value key='&quot;Bassens&quot;' value='44.907451999999999' />
                <semantic-value key='&quot;Bei Jao&quot;' value='22.928619000000001' />
                <semantic-value key='&quot;Beilun&quot;' value='29.906571' />
                <semantic-value key='&quot;Bell Bay&quot;' value='-41.13308' />
                <semantic-value key='&quot;Boca Chica&quot;' value='18.452537' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='42.934216999999997' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='8.4896419999999999' />
                <semantic-value key='&quot;Caucedo&quot;' value='18.425775000000002' />
                <semantic-value key='&quot;Chiwan&quot;' value='22.460884' />
                <semantic-value key='&quot;Constantza&quot;' value='44.162775000000003' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='45.863187000000003' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='19.082697' />
                <semantic-value key='&quot;El Dekheila&quot;' value='31.125387' />
                <semantic-value key='&quot;Escombreras&quot;' value='37.559161000000003' />
                <semantic-value key='&quot;Fremantle&quot;' value='-32.057139999999997' />
                <semantic-value key='&quot;Fuzhou&quot;' value='26.057061000000001' />
                <semantic-value key='&quot;Gevle&quot;' value='60.676642000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='36.042090000000002' />
                <semantic-value key='&quot;Hakata&quot;' value='33.610410000000002' />
                <semantic-value key='&quot;Hirohata&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='55.608159999999998' />
                <semantic-value key='&quot;Itajay&quot;' value='-26.912541000000001' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='24.987984999999998' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='33.155647999999999' />
                <semantic-value key='&quot;Judda&quot;' value='21.494458000000002' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='22.673974000000001' />
                <semantic-value key='&quot;Kemlik&quot;' value='39.976376000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='25.353408000000002' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='26.474426000000001' />
                <semantic-value key='&quot;Kingston&quot;' value='44.230178000000002' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='43.388568999999997' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-11.920743' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='13.101851999999999' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='9.0482990000000001' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='17.954609999999999' />
                <semantic-value key='&quot;Luda&quot;' value='22.310763999999999' />
                <semantic-value key='&quot;Mahahual&quot;' value='18.715810000000001' />
                <semantic-value key='&quot;Mamonal&quot;' value='10.312326000000001' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='2.996632' />
                <semantic-value key='&quot;Moin&quot;' value='9.9924759999999999' />
                <semantic-value key='&quot;Moji&quot;' value='33.911963' />
                <semantic-value key='&quot;Mosel&quot;' value='43.268963999999997' />
                <semantic-value key='&quot;Munguba&quot;' value='-0.91625999999999996' />
                <semantic-value key='&quot;Mylaki&quot;' value='38.38353' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='35.084313999999999' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='38.744047000000002' />
                <semantic-value key='&quot;New Mangalore&quot;' value='12.947471999999999' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='18.949912999999999' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='18.407342' />
                <semantic-value key='&quot;Pajaritos&quot;' value='20.557535000000001' />
                <semantic-value key='&quot;Panderma&quot;' value='40.353513' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='1.4660839999999999' />
                <semantic-value key='&quot;Penarth&quot;' value='51.445248999999997' />
                <semantic-value key='&quot;Piraievs&quot;' value='37.943368999999997' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='36.029528999999997' />
                <semantic-value key='&quot;Point Lisas&quot;' value='10.407755999999999' />
                <semantic-value key='&quot;Point Tupper&quot;' value='45.606653000000001' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='10.31551' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-3.5521180000000001' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='17.893920999999999' />
                <semantic-value key='&quot;Port Kembla&quot;' value='-34.486659000000003' />
                <semantic-value key='&quot;Port Rashid&quot;' value='25.284811999999999' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='2.9986890000000002' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='41.183098000000001' />
                <semantic-value key='&quot;Portocel&quot;' value='-19.840129999999998' />
                <semantic-value key='&quot;Progreso&quot;' value='21.279890999999999' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='12.219196' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-36.715183000000003' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='13.404448' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='7.9043239999999999' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-2.283944' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='13.929124' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='9.7312200000000004' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='1.234464' />
                <semantic-value key='&quot;Punta Morales&quot;' value='10.067382' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='36.992193999999998' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='28.428712999999998' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='51.830506999999997' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='18.600787' />
                <semantic-value key='&quot;Ruwais&quot;' value='24.109658' />
                <semantic-value key='&quot;Samarai&quot;' value='-10.612055' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='43.587783000000002' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-32.747911000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='10.385949' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-2.4248539999999998' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='37.101041000000002' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='15.690427' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-2.5393650000000001' />
                <semantic-value key='&quot;Sarnia&quot;' value='42.974594000000003' />
                <semantic-value key='&quot;Saupe&quot;' value='-12.738681' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='18.229755000000001' />
                <semantic-value key='&quot;Selangor&quot;' value='3.3391470000000001' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-22.986329000000001' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='1.3974340000000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='44.455103000000001' />
                <semantic-value key='&quot;Shekou&quot;' value='22.481929000000001' />
                <semantic-value key='&quot;Shellhaven&quot;' value='51.512303000000003' />
                <semantic-value key='&quot;Shilong&quot;' value='23.105274999999999' />
                <semantic-value key='&quot;Simizu&quot;' value='35.098028999999997' />
                <semantic-value key='&quot;Sinoe&quot;' value='5.0250640000000004' />
                <semantic-value key='&quot;South Riding Point&quot;' value='26.625854' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-62.207858999999999' />
                <semantic-value key='&quot;Southhampton&quot;' value='50.909450999999997' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='18.429884999999999' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='52.054468' />
                <semantic-value key='&quot;St. Martin&quot;' value='18.081091000000001' />
                <semantic-value key='&quot;Stadersand&quot;' value='53.620538000000003' />
                <semantic-value key='&quot;Subic Bay&quot;' value='14.791409' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='1.3399970000000001' />
                <semantic-value key='&quot;Surabaya&quot;' value='-7.2595929999999997' />
                <semantic-value key='&quot;Susaka&quot;' value='44.508685' />
                <semantic-value key='&quot;Taichung&quot;' value='24.139690999999999' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='1.362382' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='1.0615289999999999' />
                <semantic-value key='&quot;Teesport&quot;' value='54.610365999999999' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='-0.99244399999999999' />
                <semantic-value key='&quot;Tema&quot;' value='5.7346950000000003' />
                <semantic-value key='&quot;Tilbury&quot;' value='51.462698000000003' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='6.4314200000000001' />
                <semantic-value key='&quot;Tobago&quot;' value='11.232821' />
                <semantic-value key='&quot;Trombetas&quot;' value='-7.399667' />
                <semantic-value key='&quot;Turiamo&quot;' value='10.442997999999999' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='40.761786999999998' />
                <semantic-value key='&quot;Uzunkum&quot;' value='37.817354999999999' />
                <semantic-value key='&quot;Vacamonte&quot;' value='8.910425' />
                <semantic-value key='&quot;Vaksdal&quot;' value='60.578510000000001' />
                <semantic-value key='&quot;Vallvik&quot;' value='61.184803000000002' />
                <semantic-value key='&quot;Victoria&quot;' value='48.428511999999998' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-1.5419860000000001' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='37.194201999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='49.512703000000002' />
                <semantic-value key='&quot;Villeta&quot;' value='-25.507593' />
                <semantic-value key='&quot;Vinaroz&quot;' value='40.468581' />
                <semantic-value key='&quot;Vunda Point&quot;' value='-17.680088000000001' />
                <semantic-value key='&quot;Whale Cay&quot;' value='25.403051999999999' />
                <semantic-value key='&quot;Whampoa&quot;' value='23.084468999999999' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='44.932456999999999' />
                <semantic-value key='&quot;Xcalac&quot;' value='18.271056000000002' />
                <semantic-value key='&quot;Xingang&quot;' value='39.002934000000003' />
                <semantic-value key='&quot;Yandina&quot;' value='-9.0795949999999994' />
                <semantic-value key='&quot;Yantian&quot;' value='22.589849000000001' />
                <semantic-value key='&quot;Yarimca&quot;' value='40.764625000000002' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='50.705174' />
                <semantic-value key='&quot;Yarraville&quot;' value='-37.817494000000003' />
                <semantic-value key='&quot;Yentai&quot;' value='37.472777999999998' />
                <semantic-value key='&quot;Yerakini&quot;' value='40.278911000000001' />
                <semantic-value key='&quot;Yura&quot;' value='33.972456999999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='51.319737000000003' />
                <semantic-value key='&quot;Zirku Island&quot;' value='24.879750000000001' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='51.215713999999998' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='6.1499079999999999' />
                <semantic-value key='&quot;Apapa&quot;' value='3.3646500000000001' />
                <semantic-value key='&quot;Aratu&quot;' value='-38.497734999999999' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='-70.242108000000002' />
                <semantic-value key='&quot;Bangor&quot;' value='-4.1282629999999996' />
                <semantic-value key='&quot;Barcadera&quot;' value='-69.990280999999996' />
                <semantic-value key='&quot;Bassens&quot;' value='-0.52819300000000002' />
                <semantic-value key='&quot;Bei Jao&quot;' value='113.208045' />
                <semantic-value key='&quot;Beilun&quot;' value='121.838385' />
                <semantic-value key='&quot;Bell Bay&quot;' value='146.85897800000001' />
                <semantic-value key='&quot;Boca Chica&quot;' value='-69.607164999999995' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='131.401184' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='124.620439' />
                <semantic-value key='&quot;Caucedo&quot;' value='-69.630825999999999' />
                <semantic-value key='&quot;Chiwan&quot;' value='113.88923' />
                <semantic-value key='&quot;Constantza&quot;' value='28.636849000000002' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='-73.251276000000004' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='-96.146985000000001' />
                <semantic-value key='&quot;El Dekheila&quot;' value='29.812021999999999' />
                <semantic-value key='&quot;Escombreras&quot;' value='-0.96923999999999999' />
                <semantic-value key='&quot;Fremantle&quot;' value='115.743172' />
                <semantic-value key='&quot;Fuzhou&quot;' value='119.296423' />
                <semantic-value key='&quot;Gevle&quot;' value='17.142924000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='14.252424' />
                <semantic-value key='&quot;Hakata&quot;' value='130.40307999999999' />
                <semantic-value key='&quot;Hirohata&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='-4.6887319999999999' />
                <semantic-value key='&quot;Itajay&quot;' value='-48.667282999999998' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='55.022581000000002' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='-8.6227920000000005' />
                <semantic-value key='&quot;Judda&quot;' value='39.171382999999999' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='120.280269' />
                <semantic-value key='&quot;Kemlik&quot;' value='32.583550000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='56.358727999999999' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='50.192681' />
                <semantic-value key='&quot;Kingston&quot;' value='-76.488794999999996' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='5.0305689999999998' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-77.140218000000004' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='100.913264' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='-82.081196000000006' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='-102.191582' />
                <semantic-value key='&quot;Luda&quot;' value='114.191295' />
                <semantic-value key='&quot;Mahahual&quot;' value='-87.707537000000002' />
                <semantic-value key='&quot;Mamonal&quot;' value='-75.501333000000002' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='101.394172' />
                <semantic-value key='&quot;Moin&quot;' value='-83.094492000000002' />
                <semantic-value key='&quot;Moji&quot;' value='130.97021000000001' />
                <semantic-value key='&quot;Mosel&quot;' value='-2.9347590000000001' />
                <semantic-value key='&quot;Munguba&quot;' value='-52.44744' />
                <semantic-value key='&quot;Mylaki&quot;' value='24.061402000000001' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='136.883848' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='26.833552999999998' />
                <semantic-value key='&quot;New Mangalore&quot;' value='74.817625000000007' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='72.951025000000001' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='-77.105808999999994' />
                <semantic-value key='&quot;Pajaritos&quot;' value='-97.474902' />
                <semantic-value key='&quot;Panderma&quot;' value='27.968993999999999' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='103.87198600000001' />
                <semantic-value key='&quot;Penarth&quot;' value='-3.1672250000000002' />
                <semantic-value key='&quot;Piraievs&quot;' value='23.643711' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='129.37716399999999' />
                <semantic-value key='&quot;Point Lisas&quot;' value='-61.492524000000003' />
                <semantic-value key='&quot;Point Tupper&quot;' value='-61.352902' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='-61.458786000000003' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-38.831755999999999' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='-77.132018000000002' />
                <semantic-value key='&quot;Port Kembla&quot;' value='150.90251900000001' />
                <semantic-value key='&quot;Port Rashid&quot;' value='55.278204000000002' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='101.391769' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='-8.7028839999999992' />
                <semantic-value key='&quot;Portocel&quot;' value='-40.057651' />
                <semantic-value key='&quot;Progreso&quot;' value='-89.664766' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='-71.999690000000001' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-72.981358' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='-87.429236000000003' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='-67.478913000000006' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-78.897141000000005' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='-90.761673999999999' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='-82.814772000000005' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='103.762342' />
                <semantic-value key='&quot;Punta Morales&quot;' value='-84.948671000000004' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='127.085368' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='48.49053' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='-8.3211759999999995' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='-70.147318999999996' />
                <semantic-value key='&quot;Ruwais&quot;' value='52.721159999999998' />
                <semantic-value key='&quot;Samarai&quot;' value='150.66402099999999' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='-5.9356070000000001' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-60.734498000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='123.65241' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-54.714204000000002' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='15.269824' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='-88.620148999999998' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-44.286963' />
                <semantic-value key='&quot;Sarnia&quot;' value='-82.411687999999998' />
                <semantic-value key='&quot;Saupe&quot;' value='-38.612997' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='-78.139852000000005' />
                <semantic-value key='&quot;Selangor&quot;' value='101.560378' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-43.693316000000003' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='103.94113400000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='-63.674892' />
                <semantic-value key='&quot;Shekou&quot;' value='113.919675' />
                <semantic-value key='&quot;Shellhaven&quot;' value='0.50248700000000002' />
                <semantic-value key='&quot;Shilong&quot;' value='113.874206' />
                <semantic-value key='&quot;Simizu&quot;' value='138.89828600000001' />
                <semantic-value key='&quot;Sinoe&quot;' value='-9.0406259999999996' />
                <semantic-value key='&quot;South Riding Point&quot;' value='-78.230118000000004' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-58.691121000000003' />
                <semantic-value key='&quot;Southhampton&quot;' value='-1.403246' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='-77.199562999999998' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='4.5436209999999999' />
                <semantic-value key='&quot;St. Martin&quot;' value='-63.050814000000003' />
                <semantic-value key='&quot;Stadersand&quot;' value='9.5289560000000009' />
                <semantic-value key='&quot;Subic Bay&quot;' value='120.24220699999999' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='102.13534199999999' />
                <semantic-value key='&quot;Surabaya&quot;' value='112.754603' />
                <semantic-value key='&quot;Susaka&quot;' value='14.306426' />
                <semantic-value key='&quot;Taichung&quot;' value='120.661964' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='103.553287' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='104.220911' />
                <semantic-value key='&quot;Teesport&quot;' value='-1.1508910000000001' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='100.383875' />
                <semantic-value key='&quot;Tema&quot;' value='0.031449999999999999' />
                <semantic-value key='&quot;Tilbury&quot;' value='0.36106100000000002' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='3.3436370000000002' />
                <semantic-value key='&quot;Tobago&quot;' value='-60.696677999999999' />
                <semantic-value key='&quot;Trombetas&quot;' value='-72.416460000000001' />
                <semantic-value key='&quot;Turiamo&quot;' value='-67.846881999999994' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='29.747608' />
                <semantic-value key='&quot;Uzunkum&quot;' value='27.540198' />
                <semantic-value key='&quot;Vacamonte&quot;' value='-79.701948000000002' />
                <semantic-value key='&quot;Vaksdal&quot;' value='5.7711579999999998' />
                <semantic-value key='&quot;Vallvik&quot;' value='17.179285' />
                <semantic-value key='&quot;Victoria&quot;' value='-123.36634599999999' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-48.751131999999998' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='-7.4178949999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='0.67171899999999996' />
                <semantic-value key='&quot;Villeta&quot;' value='-57.567346999999998' />
                <semantic-value key='&quot;Vinaroz&quot;' value='0.47689399999999998' />
                <semantic-value key='&quot;Vunda Point&quot;' value='177.38646299999999' />
                <semantic-value key='&quot;Whale Cay&quot;' value='-77.793935000000005' />
                <semantic-value key='&quot;Whampoa&quot;' value='113.431258' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='-66.939263999999994' />
                <semantic-value key='&quot;Xcalac&quot;' value='-87.836348000000001' />
                <semantic-value key='&quot;Xingang&quot;' value='117.708454' />
                <semantic-value key='&quot;Yandina&quot;' value='159.22081900000001' />
                <semantic-value key='&quot;Yantian&quot;' value='114.26788999999999' />
                <semantic-value key='&quot;Yarimca&quot;' value='29.752081' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='-1.5027360000000001' />
                <semantic-value key='&quot;Yarraville&quot;' value='144.89215899999999' />
                <semantic-value key='&quot;Yentai&quot;' value='121.448757' />
                <semantic-value key='&quot;Yerakini&quot;' value='23.443649000000001' />
                <semantic-value key='&quot;Yura&quot;' value='135.11632599999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='3.2083650000000001' />
                <semantic-value key='&quot;Zirku Island&quot;' value='53.072591000000003' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='4.3362879999999997' />
              </semantic-values>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Attalea&quot;' value='&quot;Antalya&quot;' />
                <semantic-value key='&quot;Banjer Masin&quot;' value='&quot;Banjarmasin&quot;' />
                <semantic-value key='&quot;Bathurst&quot;' value='&quot;Banjul&quot;' />
                <semantic-value key='&quot;Belize&quot;' value='&quot;Belize City&quot;' />
                <semantic-value key='&quot;Big Creek&quot;' value='&quot;Big Creek&quot;' />
                <semantic-value key='&quot;Cheju&quot;' value='&quot;Jeju&quot;' />
                <semantic-value key='&quot;Chibako&quot;' value='&quot;Chiba&quot;' />
                <semantic-value key='&quot;Colombo Harbor&quot;' value='&quot;Colombo&quot;' />
                <semantic-value key='&quot;Derindje&quot;' value='&quot;Derince&quot;' />
                <semantic-value key='&quot;El Djazair&quot;' value='&quot;Algiers&quot;' />
                <semantic-value key='&quot;Freeport&quot;' value='&quot;Freeport&quot;' />
                <semantic-value key='&quot;Hull&quot;' value='&quot;Hull&quot;' />
                <semantic-value key='&quot;Jiangyin&quot;' value='&quot;Changzhou Shi&quot;' />
                <semantic-value key='&quot;Jinsen&quot;' value='&quot;Incheon&quot;' />
                <semantic-value key='&quot;Kanokawa&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Karachi Harbor&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Khor al Ami&quot;' value='&quot;Kuwait City&quot;' />
                <semantic-value key='&quot;Kole Terminal&quot;' value='&quot;Douala&quot;' />
                <semantic-value key='&quot;Kristiansand S&quot;' value='&quot;Kristiansand&quot;' />
                <semantic-value key='&quot;Kunson&quot;' value='&quot;Gunsan&quot;' />
                <semantic-value key='&quot;La Coruna&quot;' value='&quot;Corunna&quot;' />
                <semantic-value key='&quot;Londonderry&quot;' value='&quot;Londonderry&quot;' />
                <semantic-value key='&quot;Military - Quingdau&quot;' value='&quot;Qingdao Shi&quot;' />
                <semantic-value key='&quot;Military - Yokohama&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Mina Dumyat&quot;' value='&quot;Damietta&quot;' />
                <semantic-value key='&quot;Mina Zayed&quot;' value='&quot;Dubai&quot;' />
                <semantic-value key='&quot;Mizusima&quot;' value='&quot;Toyama-shi&quot;' />
                <semantic-value key='&quot;Nanticoke&quot;' value='&quot;Nanticoke&quot;' />
                <semantic-value key='&quot;Ningpo&quot;' value='&quot;Ningbo Shi&quot;' />
                <semantic-value key='&quot;North Atlantic (Maine to Cape Hatteras)&quot;' value='&quot;Hatteras&quot;' />
                <semantic-value key='&quot;Pakhoi&quot;' value='&quot;Beihai Shi&quot;' />
                <semantic-value key='&quot;Panama Canal - Caribbean&quot;' value='&quot;Panama City&quot;' />
                <semantic-value key='&quot;Pandjang&quot;' value='&quot;Bandar Lampung&quot;' />
                <semantic-value key='&quot;Philipsburgh&quot;' value='&quot;Philipsburg&quot;' />
                <semantic-value key='&quot;Pinang&quot;' value='&quot;Penang&quot;' />
                <semantic-value key='&quot;Port Arthur&quot;' value='&quot;Dalian Shi&quot;' />
                <semantic-value key='&quot;Port Bustamante&quot;' value='&quot;Port Royal&quot;' />
                <semantic-value key='&quot;Port Lyttelton&quot;' value='&quot;Lyttelton&quot;' />
                <semantic-value key='&quot;Port Natal&quot;' value='&quot;Durban&quot;' />
                <semantic-value key='&quot;Port Qasim&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Puduchcheri&quot;' value='&quot;Puducherry&quot;' />
                <semantic-value key='&quot;Puerto Manzanillo&quot;' value='&quot;Manzanillo&quot;' />
                <semantic-value key='&quot;Qinhuangdao Gang&quot;' value='&quot;Qinhuangdao Shi&quot;' />
                <semantic-value key='&quot;Santa Barbara de Samana&quot;' value='&quot;Samana&quot;' />
                <semantic-value key='&quot;Sluiskill&quot;' value='&quot;Sluiskil&quot;' />
                <semantic-value key='&quot;Songkhla Harbor&quot;' value='&quot;Songkhla&quot;' />
                <semantic-value key='&quot;Soo&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;Sriracha&quot;' value='&quot;Si Racha&quot;' />
                <semantic-value key='&quot;St. Croix&quot;' value='&quot;Saint Croix&quot;' />
                <semantic-value key='&quot;Sultan Qaboos&quot;' value='&quot;Muscat&quot;' />
                <semantic-value key='&quot;Swatow&quot;' value='&quot;Shantou Shi&quot;' />
                <semantic-value key='&quot;Tallinn&quot;' value='&quot;Tallinn&quot;' />
                <semantic-value key='&quot;Tanjung Priok&quot;' value='&quot;Tipar&quot;' />
                <semantic-value key='&quot;Tarakan Island&quot;' value='&quot;Tarakan&quot;' />
                <semantic-value key='&quot;Thanh Pho Ho Chi Minh&quot;' value='&quot;Ho Chi Minh City&quot;' />
                <semantic-value key='&quot;Tourane&quot;' value='&quot;Da Nang&quot;' />
                <semantic-value key='&quot;Toyohasi&quot;' value='&quot;Toyohashi-shi&quot;' />
                <semantic-value key='&quot;Trincomali&quot;' value='&quot;Trincomalee&quot;' />
                <semantic-value key='&quot;Valencia Harvor&quot;' value='&quot;Knightstown&quot;' />
                <semantic-value key='&quot;Vegesack&quot;' value='&quot;Bremen&quot;' />
                <semantic-value key='&quot;Villagarcia de Arosa&quot;' value='&quot;Vilagarcía de Arousa&quot;' />
                <semantic-value key='&quot;Vito&quot;' value='&quot;Manila&quot;' />
                <semantic-value key='&quot;Welshpool&quot;' value='&quot;Welshpool&quot;' />
                <semantic-value key='&quot;Ymuiden&quot;' value='&quot;IJmuiden&quot;' />
                <semantic-value key='&quot;Yumuri&quot;' value='&quot;Havana&quot;' />
                <semantic-value key='&quot;Yuzhnyy&quot;' value='&quot;Yuzhne&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country of Lading]' derivation='None' name='[none:Country of Lading:nk]' pivot='key' type='nominal' />
            <column-instance column='[Port of Lading]' derivation='None' name='[none:Port of Lading:nk]' pivot='key' type='nominal' />
            <column-instance column='[Containers]' derivation='Sum' name='[sum:Containers:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;Aabenraa&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Nombre de Dios&quot;' />
              <groupfilter from='&quot;Noumea&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Zwyndrecht&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Longitude (generated)]' field-type='quantitative' max='21377601.588305153' min='-16450565.247676078' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Latitude (generated)]' field-type='quantitative' max='14223249.965950428' min='-7392845.368895988' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[sum:Containers:qk]' />
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]' />
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6811602115631104' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Latitude (generated)]</rows>
        <cols>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{3105CC67-B635-400F-AB0F-577C1DF7A8FD}' />
    </worksheet>
    <worksheet name='foreign-ports-zoom-to-germany'>
      <table>
        <view>
          <datasources>
            <datasource caption='port-of-lading-summary (savannah-unlading_2014-2018)' name='federated.1phuvdy1lq0m8w1h3bhw90cfl96s' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1phuvdy1lq0m8w1h3bhw90cfl96s'>
            <column datatype='integer' name='[Containers]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country of Lading]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;China (Mainland)&quot;' value='&quot;China&quot;' />
                <semantic-value key='&quot;Fiji Islands&quot;' value='&quot;Fiji&quot;' />
                <semantic-value key='&quot;Netherland Antilles&quot;' value='&quot;Netherlands&quot;' />
                <semantic-value key='&quot;St. Vincent &amp; Northern Grenadines&quot;' value='&quot;Saint Vincent and the Grenadines&quot;' />
                <semantic-value key='&quot;Venezuala&quot;' value='&quot;Venezuela&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Port of Lading]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='62.472119999999997' />
                <semantic-value key='&quot;Apapa&quot;' value='6.4554280000000004' />
                <semantic-value key='&quot;Aratu&quot;' value='-12.778541000000001' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='11.776904' />
                <semantic-value key='&quot;Bangor&quot;' value='53.227094999999998' />
                <semantic-value key='&quot;Barcadera&quot;' value='12.48315' />
                <semantic-value key='&quot;Bassens&quot;' value='44.907451999999999' />
                <semantic-value key='&quot;Bei Jao&quot;' value='22.928619000000001' />
                <semantic-value key='&quot;Beilun&quot;' value='29.906571' />
                <semantic-value key='&quot;Bell Bay&quot;' value='-41.13308' />
                <semantic-value key='&quot;Boca Chica&quot;' value='18.452537' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='42.934216999999997' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='8.4896419999999999' />
                <semantic-value key='&quot;Caucedo&quot;' value='18.425775000000002' />
                <semantic-value key='&quot;Chiwan&quot;' value='22.460884' />
                <semantic-value key='&quot;Constantza&quot;' value='44.162775000000003' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='45.863187000000003' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='19.082697' />
                <semantic-value key='&quot;El Dekheila&quot;' value='31.125387' />
                <semantic-value key='&quot;Escombreras&quot;' value='37.559161000000003' />
                <semantic-value key='&quot;Fremantle&quot;' value='-32.057139999999997' />
                <semantic-value key='&quot;Fuzhou&quot;' value='26.057061000000001' />
                <semantic-value key='&quot;Gevle&quot;' value='60.676642000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='36.042090000000002' />
                <semantic-value key='&quot;Hakata&quot;' value='33.610410000000002' />
                <semantic-value key='&quot;Hirohata&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='34.787025999999997' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='55.608159999999998' />
                <semantic-value key='&quot;Itajay&quot;' value='-26.912541000000001' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='24.987984999999998' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='33.155647999999999' />
                <semantic-value key='&quot;Judda&quot;' value='21.494458000000002' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='22.673974000000001' />
                <semantic-value key='&quot;Kemlik&quot;' value='39.976376000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='25.353408000000002' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='26.474426000000001' />
                <semantic-value key='&quot;Kingston&quot;' value='44.230178000000002' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='43.388568999999997' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-11.920743' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='13.101851999999999' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='9.0482990000000001' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='17.954609999999999' />
                <semantic-value key='&quot;Luda&quot;' value='22.310763999999999' />
                <semantic-value key='&quot;Mahahual&quot;' value='18.715810000000001' />
                <semantic-value key='&quot;Mamonal&quot;' value='10.312326000000001' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='2.996632' />
                <semantic-value key='&quot;Moin&quot;' value='9.9924759999999999' />
                <semantic-value key='&quot;Moji&quot;' value='33.911963' />
                <semantic-value key='&quot;Mosel&quot;' value='43.268963999999997' />
                <semantic-value key='&quot;Munguba&quot;' value='-0.91625999999999996' />
                <semantic-value key='&quot;Mylaki&quot;' value='38.38353' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='35.084313999999999' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='38.744047000000002' />
                <semantic-value key='&quot;New Mangalore&quot;' value='12.947471999999999' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='18.949912999999999' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='18.407342' />
                <semantic-value key='&quot;Pajaritos&quot;' value='20.557535000000001' />
                <semantic-value key='&quot;Panderma&quot;' value='40.353513' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='1.4660839999999999' />
                <semantic-value key='&quot;Penarth&quot;' value='51.445248999999997' />
                <semantic-value key='&quot;Piraievs&quot;' value='37.943368999999997' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='36.029528999999997' />
                <semantic-value key='&quot;Point Lisas&quot;' value='10.407755999999999' />
                <semantic-value key='&quot;Point Tupper&quot;' value='45.606653000000001' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='10.31551' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-3.5521180000000001' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='17.893920999999999' />
                <semantic-value key='&quot;Port Kembla&quot;' value='-34.486659000000003' />
                <semantic-value key='&quot;Port Rashid&quot;' value='25.284811999999999' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='2.9986890000000002' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='41.183098000000001' />
                <semantic-value key='&quot;Portocel&quot;' value='-19.840129999999998' />
                <semantic-value key='&quot;Progreso&quot;' value='21.279890999999999' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='12.219196' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-36.715183000000003' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='13.404448' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='7.9043239999999999' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-2.283944' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='13.929124' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='9.7312200000000004' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='1.234464' />
                <semantic-value key='&quot;Punta Morales&quot;' value='10.067382' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='36.992193999999998' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='28.428712999999998' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='51.830506999999997' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='18.600787' />
                <semantic-value key='&quot;Ruwais&quot;' value='24.109658' />
                <semantic-value key='&quot;Samarai&quot;' value='-10.612055' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='43.587783000000002' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-32.747911000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='10.385949' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-2.4248539999999998' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='37.101041000000002' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='15.690427' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-2.5393650000000001' />
                <semantic-value key='&quot;Sarnia&quot;' value='42.974594000000003' />
                <semantic-value key='&quot;Saupe&quot;' value='-12.738681' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='18.229755000000001' />
                <semantic-value key='&quot;Selangor&quot;' value='3.3391470000000001' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-22.986329000000001' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='1.3974340000000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='44.455103000000001' />
                <semantic-value key='&quot;Shekou&quot;' value='22.481929000000001' />
                <semantic-value key='&quot;Shellhaven&quot;' value='51.512303000000003' />
                <semantic-value key='&quot;Shilong&quot;' value='23.105274999999999' />
                <semantic-value key='&quot;Simizu&quot;' value='35.098028999999997' />
                <semantic-value key='&quot;Sinoe&quot;' value='5.0250640000000004' />
                <semantic-value key='&quot;South Riding Point&quot;' value='26.625854' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-62.207858999999999' />
                <semantic-value key='&quot;Southhampton&quot;' value='50.909450999999997' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='18.429884999999999' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='52.054468' />
                <semantic-value key='&quot;St. Martin&quot;' value='18.081091000000001' />
                <semantic-value key='&quot;Stadersand&quot;' value='53.620538000000003' />
                <semantic-value key='&quot;Subic Bay&quot;' value='14.791409' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='1.3399970000000001' />
                <semantic-value key='&quot;Surabaya&quot;' value='-7.2595929999999997' />
                <semantic-value key='&quot;Susaka&quot;' value='44.508685' />
                <semantic-value key='&quot;Taichung&quot;' value='24.139690999999999' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='1.362382' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='1.0615289999999999' />
                <semantic-value key='&quot;Teesport&quot;' value='54.610365999999999' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='-0.99244399999999999' />
                <semantic-value key='&quot;Tema&quot;' value='5.7346950000000003' />
                <semantic-value key='&quot;Tilbury&quot;' value='51.462698000000003' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='6.4314200000000001' />
                <semantic-value key='&quot;Tobago&quot;' value='11.232821' />
                <semantic-value key='&quot;Trombetas&quot;' value='-7.399667' />
                <semantic-value key='&quot;Turiamo&quot;' value='10.442997999999999' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='40.761786999999998' />
                <semantic-value key='&quot;Uzunkum&quot;' value='37.817354999999999' />
                <semantic-value key='&quot;Vacamonte&quot;' value='8.910425' />
                <semantic-value key='&quot;Vaksdal&quot;' value='60.578510000000001' />
                <semantic-value key='&quot;Vallvik&quot;' value='61.184803000000002' />
                <semantic-value key='&quot;Victoria&quot;' value='48.428511999999998' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-1.5419860000000001' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='37.194201999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='49.512703000000002' />
                <semantic-value key='&quot;Villeta&quot;' value='-25.507593' />
                <semantic-value key='&quot;Vinaroz&quot;' value='40.468581' />
                <semantic-value key='&quot;Vunda Point&quot;' value='-17.680088000000001' />
                <semantic-value key='&quot;Whale Cay&quot;' value='25.403051999999999' />
                <semantic-value key='&quot;Whampoa&quot;' value='23.084468999999999' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='44.932456999999999' />
                <semantic-value key='&quot;Xcalac&quot;' value='18.271056000000002' />
                <semantic-value key='&quot;Xingang&quot;' value='39.002934000000003' />
                <semantic-value key='&quot;Yandina&quot;' value='-9.0795949999999994' />
                <semantic-value key='&quot;Yantian&quot;' value='22.589849000000001' />
                <semantic-value key='&quot;Yarimca&quot;' value='40.764625000000002' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='50.705174' />
                <semantic-value key='&quot;Yarraville&quot;' value='-37.817494000000003' />
                <semantic-value key='&quot;Yentai&quot;' value='37.472777999999998' />
                <semantic-value key='&quot;Yerakini&quot;' value='40.278911000000001' />
                <semantic-value key='&quot;Yura&quot;' value='33.972456999999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='51.319737000000003' />
                <semantic-value key='&quot;Zirku Island&quot;' value='24.879750000000001' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='51.215713999999998' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Aalesund&quot;' value='6.1499079999999999' />
                <semantic-value key='&quot;Apapa&quot;' value='3.3646500000000001' />
                <semantic-value key='&quot;Aratu&quot;' value='-38.497734999999999' />
                <semantic-value key='&quot;Bahia de Amuay&quot;' value='-70.242108000000002' />
                <semantic-value key='&quot;Bangor&quot;' value='-4.1282629999999996' />
                <semantic-value key='&quot;Barcadera&quot;' value='-69.990280999999996' />
                <semantic-value key='&quot;Bassens&quot;' value='-0.52819300000000002' />
                <semantic-value key='&quot;Bei Jao&quot;' value='113.208045' />
                <semantic-value key='&quot;Beilun&quot;' value='121.838385' />
                <semantic-value key='&quot;Bell Bay&quot;' value='146.85897800000001' />
                <semantic-value key='&quot;Boca Chica&quot;' value='-69.607164999999995' />
                <semantic-value key='&quot;Bukhta Severnaya&quot;' value='131.401184' />
                <semantic-value key='&quot;Cagayan de Oro&quot;' value='124.620439' />
                <semantic-value key='&quot;Caucedo&quot;' value='-69.630825999999999' />
                <semantic-value key='&quot;Chiwan&quot;' value='113.88923' />
                <semantic-value key='&quot;Constantza&quot;' value='28.636849000000002' />
                <semantic-value key='&quot;Contrecoeur&quot;' value='-73.251276000000004' />
                <semantic-value key='&quot;Dos Bocas&quot;' value='-96.146985000000001' />
                <semantic-value key='&quot;El Dekheila&quot;' value='29.812021999999999' />
                <semantic-value key='&quot;Escombreras&quot;' value='-0.96923999999999999' />
                <semantic-value key='&quot;Fremantle&quot;' value='115.743172' />
                <semantic-value key='&quot;Fuzhou&quot;' value='119.296423' />
                <semantic-value key='&quot;Gevle&quot;' value='17.142924000000001' />
                <semantic-value key='&quot;Gozo Island&quot;' value='14.252424' />
                <semantic-value key='&quot;Hakata&quot;' value='130.40307999999999' />
                <semantic-value key='&quot;Hirohata&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Hitaki Ko&quot;' value='135.40090000000001' />
                <semantic-value key='&quot;Irvine Harbor&quot;' value='-4.6887319999999999' />
                <semantic-value key='&quot;Itajay&quot;' value='-48.667282999999998' />
                <semantic-value key='&quot;Jebel Ali&quot;' value='55.022581000000002' />
                <semantic-value key='&quot;Jorf Lasfar&quot;' value='-8.6227920000000005' />
                <semantic-value key='&quot;Judda&quot;' value='39.171382999999999' />
                <semantic-value key='&quot;Kaohsiung&quot;' value='120.280269' />
                <semantic-value key='&quot;Kemlik&quot;' value='32.583550000000002' />
                <semantic-value key='&quot;Khor Fakkan&quot;' value='56.358727999999999' />
                <semantic-value key='&quot;King Abdul Aziz Port&quot;' value='50.192681' />
                <semantic-value key='&quot;Kingston&quot;' value='-76.488794999999996' />
                <semantic-value key='&quot;L&apos;Avera&quot;' value='5.0305689999999998' />
                <semantic-value key='&quot;La Pampilla&quot;' value='-77.140218000000004' />
                <semantic-value key='&quot;Laem Chabang&quot;' value='100.913264' />
                <semantic-value key='&quot;Laguna de Chiriqui&quot;' value='-82.081196000000006' />
                <semantic-value key='&quot;Lazaro Cardenas&quot;' value='-102.191582' />
                <semantic-value key='&quot;Luda&quot;' value='114.191295' />
                <semantic-value key='&quot;Mahahual&quot;' value='-87.707537000000002' />
                <semantic-value key='&quot;Mamonal&quot;' value='-75.501333000000002' />
                <semantic-value key='&quot;Military - Port Kelang&quot;' value='101.394172' />
                <semantic-value key='&quot;Moin&quot;' value='-83.094492000000002' />
                <semantic-value key='&quot;Moji&quot;' value='130.97021000000001' />
                <semantic-value key='&quot;Mosel&quot;' value='-2.9347590000000001' />
                <semantic-value key='&quot;Munguba&quot;' value='-52.44744' />
                <semantic-value key='&quot;Mylaki&quot;' value='24.061402000000001' />
                <semantic-value key='&quot;Nagoya Ko&quot;' value='136.883848' />
                <semantic-value key='&quot;Nemrut Bay&quot;' value='26.833552999999998' />
                <semantic-value key='&quot;New Mangalore&quot;' value='74.817625000000007' />
                <semantic-value key='&quot;Nhava Sheva&quot;' value='72.951025000000001' />
                <semantic-value key='&quot;Ocho Rios&quot;' value='-77.105808999999994' />
                <semantic-value key='&quot;Pajaritos&quot;' value='-97.474902' />
                <semantic-value key='&quot;Panderma&quot;' value='27.968993999999999' />
                <semantic-value key='&quot;Pasir Gudang&quot;' value='103.87198600000001' />
                <semantic-value key='&quot;Penarth&quot;' value='-3.1672250000000002' />
                <semantic-value key='&quot;Piraievs&quot;' value='23.643711' />
                <semantic-value key='&quot;Pohang Hang&quot;' value='129.37716399999999' />
                <semantic-value key='&quot;Point Lisas&quot;' value='-61.492524000000003' />
                <semantic-value key='&quot;Point Tupper&quot;' value='-61.352902' />
                <semantic-value key='&quot;Pointe a Pierre&quot;' value='-61.458786000000003' />
                <semantic-value key='&quot;Port do Pecem&quot;' value='-38.831755999999999' />
                <semantic-value key='&quot;Port Esquivel&quot;' value='-77.132018000000002' />
                <semantic-value key='&quot;Port Kembla&quot;' value='150.90251900000001' />
                <semantic-value key='&quot;Port Rashid&quot;' value='55.278204000000002' />
                <semantic-value key='&quot;Port Swettenham&quot;' value='101.391769' />
                <semantic-value key='&quot;Porto de Leixoes&quot;' value='-8.7028839999999992' />
                <semantic-value key='&quot;Portocel&quot;' value='-40.057651' />
                <semantic-value key='&quot;Progreso&quot;' value='-89.664766' />
                <semantic-value key='&quot;Puerto Bolivar&quot;' value='-71.999690000000001' />
                <semantic-value key='&quot;Puerto de Lirquen&quot;' value='-72.981358' />
                <semantic-value key='&quot;Puerto Henecan&quot;' value='-87.429236000000003' />
                <semantic-value key='&quot;Puerto Miranda&quot;' value='-67.478913000000006' />
                <semantic-value key='&quot;Puerto Nuevo&quot;' value='-78.897141000000005' />
                <semantic-value key='&quot;Puerto Quetzal&quot;' value='-90.761673999999999' />
                <semantic-value key='&quot;Puerto Vargas&quot;' value='-82.814772000000005' />
                <semantic-value key='&quot;Pulum Bukum&quot;' value='103.762342' />
                <semantic-value key='&quot;Punta Morales&quot;' value='-84.948671000000004' />
                <semantic-value key='&quot;Pyungtaek&quot;' value='127.085368' />
                <semantic-value key='&quot;Ras Al Khafji&quot;' value='48.49053' />
                <semantic-value key='&quot;Ringaskiddy&quot;' value='-8.3211759999999995' />
                <semantic-value key='&quot;Rio Jaina&quot;' value='-70.147318999999996' />
                <semantic-value key='&quot;Ruwais&quot;' value='52.721159999999998' />
                <semantic-value key='&quot;Samarai&quot;' value='150.66402099999999' />
                <semantic-value key='&quot;San Juan de Nieva&quot;' value='-5.9356070000000001' />
                <semantic-value key='&quot;San Lorenzo&quot;' value='-60.734498000000002' />
                <semantic-value key='&quot;Sangi&quot;' value='123.65241' />
                <semantic-value key='&quot;Santa Clara&quot;' value='-54.714204000000002' />
                <semantic-value key='&quot;Santa Panagia&quot;' value='15.269824' />
                <semantic-value key='&quot;Santo Tomas de Castilla&quot;' value='-88.620148999999998' />
                <semantic-value key='&quot;Sao Luiz de Maranhao&quot;' value='-44.286963' />
                <semantic-value key='&quot;Sarnia&quot;' value='-82.411687999999998' />
                <semantic-value key='&quot;Saupe&quot;' value='-38.612997' />
                <semantic-value key='&quot;Savanna La Mar&quot;' value='-78.139852000000005' />
                <semantic-value key='&quot;Selangor&quot;' value='101.560378' />
                <semantic-value key='&quot;Sepetiba Bay&quot;' value='-43.693316000000003' />
                <semantic-value key='&quot;Serangoon Harbor&quot;' value='103.94113400000001' />
                <semantic-value key='&quot;Seven Islands&quot;' value='-63.674892' />
                <semantic-value key='&quot;Shekou&quot;' value='113.919675' />
                <semantic-value key='&quot;Shellhaven&quot;' value='0.50248700000000002' />
                <semantic-value key='&quot;Shilong&quot;' value='113.874206' />
                <semantic-value key='&quot;Simizu&quot;' value='138.89828600000001' />
                <semantic-value key='&quot;Sinoe&quot;' value='-9.0406259999999996' />
                <semantic-value key='&quot;South Riding Point&quot;' value='-78.230118000000004' />
                <semantic-value key='&quot;South Shetlands&quot;' value='-58.691121000000003' />
                <semantic-value key='&quot;Southhampton&quot;' value='-1.403246' />
                <semantic-value key='&quot;St. Ann&apos;s Bay&quot;' value='-77.199562999999998' />
                <semantic-value key='&quot;St. Eustatius&quot;' value='4.5436209999999999' />
                <semantic-value key='&quot;St. Martin&quot;' value='-63.050814000000003' />
                <semantic-value key='&quot;Stadersand&quot;' value='9.5289560000000009' />
                <semantic-value key='&quot;Subic Bay&quot;' value='120.24220699999999' />
                <semantic-value key='&quot;Sungei Pakning&quot;' value='102.13534199999999' />
                <semantic-value key='&quot;Surabaya&quot;' value='112.754603' />
                <semantic-value key='&quot;Susaka&quot;' value='14.306426' />
                <semantic-value key='&quot;Taichung&quot;' value='120.661964' />
                <semantic-value key='&quot;Tanjung Pelepas&quot;' value='103.553287' />
                <semantic-value key='&quot;Tanjunguban&quot;' value='104.220911' />
                <semantic-value key='&quot;Teesport&quot;' value='-1.1508910000000001' />
                <semantic-value key='&quot;Teluk Bayur&quot;' value='100.383875' />
                <semantic-value key='&quot;Tema&quot;' value='0.031449999999999999' />
                <semantic-value key='&quot;Tilbury&quot;' value='0.36106100000000002' />
                <semantic-value key='&quot;Tin Can Island&quot;' value='3.3436370000000002' />
                <semantic-value key='&quot;Tobago&quot;' value='-60.696677999999999' />
                <semantic-value key='&quot;Trombetas&quot;' value='-72.416460000000001' />
                <semantic-value key='&quot;Turiamo&quot;' value='-67.846881999999994' />
                <semantic-value key='&quot;Tutunciftlik&quot;' value='29.747608' />
                <semantic-value key='&quot;Uzunkum&quot;' value='27.540198' />
                <semantic-value key='&quot;Vacamonte&quot;' value='-79.701948000000002' />
                <semantic-value key='&quot;Vaksdal&quot;' value='5.7711579999999998' />
                <semantic-value key='&quot;Vallvik&quot;' value='17.179285' />
                <semantic-value key='&quot;Victoria&quot;' value='-123.36634599999999' />
                <semantic-value key='&quot;Vila do Conde&quot;' value='-48.751131999999998' />
                <semantic-value key='&quot;Vila Real de San Antonio&quot;' value='-7.4178949999999997' />
                <semantic-value key='&quot;Villequier&quot;' value='0.67171899999999996' />
                <semantic-value key='&quot;Villeta&quot;' value='-57.567346999999998' />
                <semantic-value key='&quot;Vinaroz&quot;' value='0.47689399999999998' />
                <semantic-value key='&quot;Vunda Point&quot;' value='177.38646299999999' />
                <semantic-value key='&quot;Whale Cay&quot;' value='-77.793935000000005' />
                <semantic-value key='&quot;Whampoa&quot;' value='113.431258' />
                <semantic-value key='&quot;Wilsons Beach&quot;' value='-66.939263999999994' />
                <semantic-value key='&quot;Xcalac&quot;' value='-87.836348000000001' />
                <semantic-value key='&quot;Xingang&quot;' value='117.708454' />
                <semantic-value key='&quot;Yandina&quot;' value='159.22081900000001' />
                <semantic-value key='&quot;Yantian&quot;' value='114.26788999999999' />
                <semantic-value key='&quot;Yarimca&quot;' value='29.752081' />
                <semantic-value key='&quot;Yarmouth Harbor&quot;' value='-1.5027360000000001' />
                <semantic-value key='&quot;Yarraville&quot;' value='144.89215899999999' />
                <semantic-value key='&quot;Yentai&quot;' value='121.448757' />
                <semantic-value key='&quot;Yerakini&quot;' value='23.443649000000001' />
                <semantic-value key='&quot;Yura&quot;' value='135.11632599999999' />
                <semantic-value key='&quot;Zeebrugge&quot;' value='3.2083650000000001' />
                <semantic-value key='&quot;Zirku Island&quot;' value='53.072591000000003' />
                <semantic-value key='&quot;Zwyndrecht&quot;' value='4.3362879999999997' />
              </semantic-values>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Attalea&quot;' value='&quot;Antalya&quot;' />
                <semantic-value key='&quot;Banjer Masin&quot;' value='&quot;Banjarmasin&quot;' />
                <semantic-value key='&quot;Bathurst&quot;' value='&quot;Banjul&quot;' />
                <semantic-value key='&quot;Belize&quot;' value='&quot;Belize City&quot;' />
                <semantic-value key='&quot;Big Creek&quot;' value='&quot;Big Creek&quot;' />
                <semantic-value key='&quot;Cheju&quot;' value='&quot;Jeju&quot;' />
                <semantic-value key='&quot;Chibako&quot;' value='&quot;Chiba&quot;' />
                <semantic-value key='&quot;Colombo Harbor&quot;' value='&quot;Colombo&quot;' />
                <semantic-value key='&quot;Derindje&quot;' value='&quot;Derince&quot;' />
                <semantic-value key='&quot;El Djazair&quot;' value='&quot;Algiers&quot;' />
                <semantic-value key='&quot;Freeport&quot;' value='&quot;Freeport&quot;' />
                <semantic-value key='&quot;Hull&quot;' value='&quot;Hull&quot;' />
                <semantic-value key='&quot;Jiangyin&quot;' value='&quot;Changzhou Shi&quot;' />
                <semantic-value key='&quot;Jinsen&quot;' value='&quot;Incheon&quot;' />
                <semantic-value key='&quot;Kanokawa&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Karachi Harbor&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Khor al Ami&quot;' value='&quot;Kuwait City&quot;' />
                <semantic-value key='&quot;Kole Terminal&quot;' value='&quot;Douala&quot;' />
                <semantic-value key='&quot;Kristiansand S&quot;' value='&quot;Kristiansand&quot;' />
                <semantic-value key='&quot;Kunson&quot;' value='&quot;Gunsan&quot;' />
                <semantic-value key='&quot;La Coruna&quot;' value='&quot;Corunna&quot;' />
                <semantic-value key='&quot;Londonderry&quot;' value='&quot;Londonderry&quot;' />
                <semantic-value key='&quot;Military - Quingdau&quot;' value='&quot;Qingdao Shi&quot;' />
                <semantic-value key='&quot;Military - Yokohama&quot;' value='&quot;Kanagawa-ku, Yokohama-shi&quot;' />
                <semantic-value key='&quot;Mina Dumyat&quot;' value='&quot;Damietta&quot;' />
                <semantic-value key='&quot;Mina Zayed&quot;' value='&quot;Dubai&quot;' />
                <semantic-value key='&quot;Mizusima&quot;' value='&quot;Toyama-shi&quot;' />
                <semantic-value key='&quot;Nanticoke&quot;' value='&quot;Nanticoke&quot;' />
                <semantic-value key='&quot;Ningpo&quot;' value='&quot;Ningbo Shi&quot;' />
                <semantic-value key='&quot;North Atlantic (Maine to Cape Hatteras)&quot;' value='&quot;Hatteras&quot;' />
                <semantic-value key='&quot;Pakhoi&quot;' value='&quot;Beihai Shi&quot;' />
                <semantic-value key='&quot;Panama Canal - Caribbean&quot;' value='&quot;Panama City&quot;' />
                <semantic-value key='&quot;Pandjang&quot;' value='&quot;Bandar Lampung&quot;' />
                <semantic-value key='&quot;Philipsburgh&quot;' value='&quot;Philipsburg&quot;' />
                <semantic-value key='&quot;Pinang&quot;' value='&quot;Penang&quot;' />
                <semantic-value key='&quot;Port Arthur&quot;' value='&quot;Dalian Shi&quot;' />
                <semantic-value key='&quot;Port Bustamante&quot;' value='&quot;Port Royal&quot;' />
                <semantic-value key='&quot;Port Lyttelton&quot;' value='&quot;Lyttelton&quot;' />
                <semantic-value key='&quot;Port Natal&quot;' value='&quot;Durban&quot;' />
                <semantic-value key='&quot;Port Qasim&quot;' value='&quot;Karachi&quot;' />
                <semantic-value key='&quot;Puduchcheri&quot;' value='&quot;Puducherry&quot;' />
                <semantic-value key='&quot;Puerto Manzanillo&quot;' value='&quot;Manzanillo&quot;' />
                <semantic-value key='&quot;Qinhuangdao Gang&quot;' value='&quot;Qinhuangdao Shi&quot;' />
                <semantic-value key='&quot;Santa Barbara de Samana&quot;' value='&quot;Samana&quot;' />
                <semantic-value key='&quot;Sluiskill&quot;' value='&quot;Sluiskil&quot;' />
                <semantic-value key='&quot;Songkhla Harbor&quot;' value='&quot;Songkhla&quot;' />
                <semantic-value key='&quot;Soo&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;Sriracha&quot;' value='&quot;Si Racha&quot;' />
                <semantic-value key='&quot;St. Croix&quot;' value='&quot;Saint Croix&quot;' />
                <semantic-value key='&quot;Sultan Qaboos&quot;' value='&quot;Muscat&quot;' />
                <semantic-value key='&quot;Swatow&quot;' value='&quot;Shantou Shi&quot;' />
                <semantic-value key='&quot;Tallinn&quot;' value='&quot;Tallinn&quot;' />
                <semantic-value key='&quot;Tanjung Priok&quot;' value='&quot;Tipar&quot;' />
                <semantic-value key='&quot;Tarakan Island&quot;' value='&quot;Tarakan&quot;' />
                <semantic-value key='&quot;Thanh Pho Ho Chi Minh&quot;' value='&quot;Ho Chi Minh City&quot;' />
                <semantic-value key='&quot;Tourane&quot;' value='&quot;Da Nang&quot;' />
                <semantic-value key='&quot;Toyohasi&quot;' value='&quot;Toyohashi-shi&quot;' />
                <semantic-value key='&quot;Trincomali&quot;' value='&quot;Trincomalee&quot;' />
                <semantic-value key='&quot;Valencia Harvor&quot;' value='&quot;Knightstown&quot;' />
                <semantic-value key='&quot;Vegesack&quot;' value='&quot;Bremen&quot;' />
                <semantic-value key='&quot;Villagarcia de Arosa&quot;' value='&quot;Vilagarcía de Arousa&quot;' />
                <semantic-value key='&quot;Vito&quot;' value='&quot;Manila&quot;' />
                <semantic-value key='&quot;Welshpool&quot;' value='&quot;Welshpool&quot;' />
                <semantic-value key='&quot;Ymuiden&quot;' value='&quot;IJmuiden&quot;' />
                <semantic-value key='&quot;Yumuri&quot;' value='&quot;Havana&quot;' />
                <semantic-value key='&quot;Yuzhnyy&quot;' value='&quot;Yuzhne&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country of Lading]' derivation='None' name='[none:Country of Lading:nk]' pivot='key' type='nominal' />
            <column-instance column='[Port of Lading]' derivation='None' name='[none:Port of Lading:nk]' pivot='key' type='nominal' />
            <column-instance column='[Containers]' derivation='Sum' name='[sum:Containers:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country of Lading:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country of Lading:nk]' member='&quot;Federal Republic of Germany&quot;' />
              <groupfilter function='member' level='[none:Country of Lading:nk]' member='&quot;Netherlands&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;Aabenraa&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Nombre de Dios&quot;' />
              <groupfilter from='&quot;Noumea&quot;' function='range' level='[none:Port of Lading:nk]' to='&quot;Zwyndrecht&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]</column>
            <column>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[sum:Containers:qk]' />
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Port of Lading:nk]' />
              <lod column='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6811602115631104' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Latitude (generated)]</rows>
        <cols>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{0FB8806A-8F28-40B7-84E2-AD8B0A1C58DF}' />
    </worksheet>
    <worksheet name='ga-ocean-economics-map'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (economics-ocean-sectors_2005-2016)' name='federated.1lqys0d04wao4z1e2mu8314nlk5k' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1lqys0d04wao4z1e2mu8314nlk5k'>
            <column datatype='string' name='[County]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column datatype='integer' name='[Establishments]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column aggregation='Sum' datatype='integer' name='[Year]' role='dimension' type='ordinal' />
            <column-instance column='[County]' derivation='None' name='[none:County:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Establishments]' derivation='Sum' name='[sum:Establishments:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]'>
            <groupfilter function='member' level='[none:Region:nk]' member='&quot;Southeast&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;AK&quot;' function='range' level='[none:State:nk]' to='&quot;DE&quot;' />
              <groupfilter from='&quot;GA&quot;' function='range' level='[none:State:nk]' to='&quot;MS&quot;' />
              <groupfilter from='&quot;NH&quot;' function='range' level='[none:State:nk]' to='&quot;RI&quot;' />
              <groupfilter from='&quot;TX&quot;' function='range' level='[none:State:nk]' to='&quot;WI&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Year:ok]'>
            <groupfilter function='member' level='[none:Year:ok]' member='2016' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</column>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</column>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Longitude (generated)]' field-type='quantitative' max='-8483175.5928994734' min='-9268465.4834924433' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Latitude (generated)]' field-type='quantitative' max='3921311.239969173' min='3519654.7713380153' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Establishments:qk]' />
              <lod column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:County:nk]' />
              <lod column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]' />
              <geometry column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Latitude (generated)]</rows>
        <cols>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{2DE3B2F8-251F-496E-8393-88A72EE752CA}' />
    </worksheet>
    <worksheet name='imports-exports-month/year'>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
            </column>
            <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_428967894022410242]' derivation='Month-Trunc' name='[tmn:Calculation_428967894022410242:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing custom-mark-size-in-axis-units='1.0' mark-alignment='mark-alignment-left' mark-sizing-setting='marks-scaling-on' use-custom-mark-size='false' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-transparency' value='98' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[tmn:Calculation_428967894022410242:qk]</cols>
      </table>
      <simple-id uuid='{A66F781C-1F0E-4464-A7AC-806F3E74CC2F}' />
    </worksheet>
    <worksheet name='imports-exports-share'>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column datatype='integer' name='[Exports Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Imports Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Exports Total]' derivation='Sum' name='[sum:Exports Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Imports Total]' derivation='Sum' name='[sum:Imports Total:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10sstqr12u8i5z10y81vi0toajb7].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Exports Total:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Imports Total:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.10sstqr12u8i5z10y81vi0toajb7].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.10sstqr12u8i5z10y81vi0toajb7].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[Multiple Values]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:ok]</cols>
      </table>
      <simple-id uuid='{042682EE-432F-49FE-AC08-62090BC535D2}' />
    </worksheet>
    <worksheet name='imports-exports_03-08'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Combined imports and exports of TEUs (twenty-foot-equivalent-unit, i.e., standard container)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='monthly-teu (savannah-unlading_2014-2018)' name='federated.10sstqr12u8i5z10y81vi0toajb7' />
          </datasources>
          <datasource-dependencies datasource='federated.10sstqr12u8i5z10y81vi0toajb7'>
            <column caption='Month Number' datatype='integer' name='[Calculation_428967894022176769]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEPART(&apos;month&apos;,[Month])' />
            </column>
            <column caption='Month/year' datatype='date' name='[Calculation_428967894022410242]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(STR([Calculation_428967894022176769]) + &quot;/01/&quot; + STR([Year]))' />
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Total]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Total]' derivation='Sum' name='[pcdf:sum:Total:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_428967894022410242]' derivation='Year' name='[yr:Calculation_428967894022410242:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[pcdf:sum:Total:qk]' />
              <text column='[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10sstqr12u8i5z10y81vi0toajb7].[sum:Total:qk]</rows>
        <cols>[federated.10sstqr12u8i5z10y81vi0toajb7].[yr:Calculation_428967894022410242:ok]</cols>
      </table>
      <simple-id uuid='{4966308E-7BCB-495C-947A-4399B0F23B30}' />
    </worksheet>
    <worksheet name='marine sector bars?'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (economics-ocean-sectors_2005-2016)' name='federated.1lqys0d04wao4z1e2mu8314nlk5k' />
          </datasources>
          <datasource-dependencies datasource='federated.1lqys0d04wao4z1e2mu8314nlk5k'>
            <column datatype='integer' name='[Employment]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Establishments]' role='measure' type='quantitative' />
            <column caption='Ocean Sector' datatype='string' name='[OceanSector]' role='dimension' type='nominal' />
            <column caption='Real GDP' datatype='integer' name='[Real_GDP]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column aggregation='Sum' datatype='integer' name='[Year]' role='dimension' type='ordinal' />
            <column-instance column='[OceanSector]' derivation='None' name='[none:OceanSector:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Employment]' derivation='Sum' name='[sum:Employment:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Establishments]' derivation='Sum' name='[sum:Establishments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Real_GDP]' derivation='Sum' name='[sum:Real_GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wages]' derivation='Sum' name='[sum:wages:qk]' pivot='key' type='quantitative' />
            <column caption='Wages' datatype='integer' name='[wages]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:OceanSector:nk]' />
              <groupfilter function='member' level='[none:OceanSector:nk]' member='&quot;All Ocean Sectors&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]'>
            <groupfilter function='member' level='[none:Region:nk]' member='&quot;Southeast&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;GA&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</column>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</column>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Establishments:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Employment:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:wages:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Real_GDP:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Establishments:qk] + ([federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Employment:qk] + ([federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:wages:qk] + [federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Real_GDP:qk])))</rows>
        <cols>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Year:ok]</cols>
      </table>
      <simple-id uuid='{72A1E8C5-B1B4-40EB-A673-C26AC10B39FE}' />
    </worksheet>
    <worksheet name='savannah-metro-routes'>
      <table>
        <view>
          <datasources>
            <datasource caption='savannah-metros-routes' name='federated.0vcwl910s6j1nn16ssfew0dp7rbd' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0vcwl910s6j1nn16ssfew0dp7rbd'>
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column-instance column='[city]' derivation='None' name='[none:city:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[none:city:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:city:nk]' member='&quot;Albuquerque &quot;' />
              <groupfilter function='member' level='[none:city:nk]' member='&quot;Anaheim &quot;' />
              <groupfilter from='&quot;Arlington &quot;' function='range' level='[none:city:nk]' to='&quot;Winston-Salem &quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[none:city:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[clct:Geometry:nk]' />
              <geometry column='[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[clct:Geometry:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[Latitude (generated)]</rows>
        <cols>[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{2C3B183E-8A82-4B33-8DDA-C5F131EC52E8}' />
    </worksheet>
    <worksheet name='southeast-ocean-economics-map'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (economics-ocean-sectors_2005-2016)' name='federated.1lqys0d04wao4z1e2mu8314nlk5k' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1lqys0d04wao4z1e2mu8314nlk5k'>
            <column datatype='string' name='[County]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[County]' derivation='None' name='[none:County:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]'>
            <groupfilter function='member' level='[none:Region:nk]' member='&quot;Southeast&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]'>
            <groupfilter from='&quot;AK&quot;' function='range' level='[none:State:nk]' to='&quot;WI&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</column>
            <column>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Longitude (generated)]' field-type='quantitative' max='-6473608.3117685523' min='-9614767.8741404302' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Latitude (generated)]' field-type='quantitative' max='4473832.0313151572' min='2867206.1567905261' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <lod column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:County:nk]' />
              <lod column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]' />
              <geometry column='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Latitude (generated)]</rows>
        <cols>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{67A62A51-120B-430B-BDC3-FEC9B7FED7E3}' />
    </worksheet>
    <worksheet name='stadersand-savannah-path'>
      <table>
        <view>
          <datasources>
            <datasource caption='path-sample' name='federated.1myyjzn0glxi9g1eljed60yf5uon' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1myyjzn0glxi9g1eljed60yf5uon'>
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1myyjzn0glxi9g1eljed60yf5uon].[clct:Geometry:nk]' />
              <geometry column='[federated.1myyjzn0glxi9g1eljed60yf5uon].[clct:Geometry:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1myyjzn0glxi9g1eljed60yf5uon].[Latitude (generated)]</rows>
        <cols>[federated.1myyjzn0glxi9g1eljed60yf5uon].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{8B40C2C2-A86A-4227-BB62-BE91BDD72C90}' />
    </worksheet>
  </worksheets>
  <windows source-height='114'>
    <window class='worksheet' name='imports-exports_03-08'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{D7F0BDC4-AA39-4399-9834-9C91734CA334}' />
    </window>
    <window class='worksheet' name='imports-exports-share'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10sstqr12u8i5z10y81vi0toajb7].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{AD29E7AF-F3AA-4634-A825-2481BB13BCCE}' />
    </window>
    <window class='worksheet' name='imports-exports-month/year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight field='[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Forecast Indicator:nk]'>
          <bucket-selection />
        </highlight>
      </viewpoint>
      <simple-id uuid='{4141F616-8883-4FEF-BC3F-367195621C50}' />
    </window>
    <window class='worksheet' name='2018-containers-sign'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{11F1BFD3-52CF-4B8D-A803-FC9B4E67777A}' />
    </window>
    <window class='worksheet' name='2018-containers-bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{51BCB35B-48F3-48CE-962D-FAEBA41D8744}' />
    </window>
    <window class='worksheet' name='containers-total-03-08'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A1B1C50D-3AA3-4778-977B-3FAF78768DC4}' />
    </window>
    <window class='worksheet' name='containers-total-03-18'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3E1551D3-36B9-4FE4-91B5-B4E2CDF6430A}' />
    </window>
    <window class='worksheet' name='containers-total-03-19'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Status:nk]</field>
            <field>[federated.10sstqr12u8i5z10y81vi0toajb7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F3FA66E5-15CF-440B-BDC5-6EB09B236AD0}' />
    </window>
    <window class='worksheet' name='foreign-ports-lading'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{989B5C76-1E48-4BF1-B435-ADDEE7D8820C}' />
    </window>
    <window class='worksheet' name='foreign-ports-lading-containers'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[sum:Containers:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{D37BE435-5F6F-425D-8B72-7C54BCEA6A9A}' />
    </window>
    <window class='worksheet' name='foreign-ports-zoom-to-germany'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[sum:Containers:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1phuvdy1lq0m8w1h3bhw90cfl96s].[none:Country of Lading:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{C4AE9941-6E46-4A5B-9886-C4BCF6523B7A}' />
    </window>
    <window class='worksheet' name='stadersand-savannah-path'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{06428A7B-E5A3-428F-9274-560AFDE876A3}' />
    </window>
    <window class='worksheet' name='filler'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1myyjzn0glxi9g1eljed60yf5uon].[none:origin:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D78CD58D-DF5C-4282-850F-F652F02FAFCF}' />
    </window>
    <window class='worksheet' name='southeast-ocean-economics-map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{ABC1FD53-42E3-4BBE-8853-542B914A421B}' />
    </window>
    <window class='worksheet' name='ga-ocean-economics-map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Establishments:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Year:ok]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[sum:Establishments:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{C2D611DD-F43A-4C10-A164-C6DDAEFF741F}' />
    </window>
    <window class='worksheet' name='marine sector bars?'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:OceanSector:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Region:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:State:nk]</field>
            <field>[federated.1lqys0d04wao4z1e2mu8314nlk5k].[none:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5AE8437D-5183-4CDB-90BC-D3755631214A}' />
    </window>
    <window class='worksheet' maximized='true' name='savannah-metro-routes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0vcwl910s6j1nn16ssfew0dp7rbd].[none:city:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{AA78D07C-76FB-410D-B0E3-1763DFEDB7D2}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='2018-containers-bar' width='138'>
      iVBORw0KGgoAAAANSUhEUgAAAIoAAADACAYAAADbRPtuAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAKgklEQVR4nO3bf2zU9R3H8accP3rFs/SwpQVEhQDjOkMPhArWwBJyjISsjTGjsSiKGTc6
      nGL2FywYyOCPRUNMJlhdEZyT+oNEgpaEGTFKaCi70osIHE6qZOoBbQ+9cL0efmF/8KMHLeW9
      CeNOXo+/Lp/v5/v9fj7JM9/vHT9uOXv27FlErqLfjV6AZAeFIiYKRUwUipgoFDFRKGKiUMRE
      oVwjiUTiRi/hulIoYqJQxEShiIlCEROFIiYKRUwUipj0v9ELsEp+upE//qWRCYtreaK09zkt
      dUHWN6UNjKhk5Yo5FAFOWyMb175BU5uD+44ZLFo6D9/gtPP2P8BTz83H50q/6R7WPbOB8OTF
      1F7ppjeJ7AjFaaVhW4qZs0Zw7IqTTnC8bRpLah/jnh7Houx4eSf5C1azbpyb9l2v8PymPays
      KSMHgKlUBqI0Rxx8aaUkwyFS5TMY0Xntt5RtsuDV4/DN9i20za7m3lv7mtdOm2sYBb0dat3N
      3lGVVIy7DRcDKCyvIhDfy75k95RifwnR5gjOxZEk4VCK0kn512gf2S3zQ+n4hLeO3k/15MF9
      z0vG6Mgvpqi3Y9/F8I4ZTfezwsuEkv60d6TNKfJTEm0mcqGUZJhQqhT/kB+5/p+IDH/1nKKx
      /gBlC2oYDMT7mhqP833TRoJNAAPx3DWRBxc8zvThLrq6unC7cy6Z3s91nGPHgeEXRooo88do
      OP/6SYZDULaQPHb2uNWV/l4nHu9zhVkto0NJtrzNPl8VNVd5mABQEGBZbeDcZydJ++EPePWl
      dyhYNY+xgwbR2ZkEumM54xQyrPDSS3j9PmINERzfeA7tB391Dpzseavc3NweY4lEAo/HY99c
      lsngUE7wcUMj4a8aCW5OHw/SNPUqv0JcOQydMJdZd66h9QSMzcunY/8RnGm+86+fDg5+9gND
      Z112ntePL9ZA5HSKUJef6pyel75ZZXAoBQSW1RJIG4luX8X7xSt6/Xkc/eCv/CPvlzxYOpLB
      A04TO7iNhqMlzC8ACqYzZfMGth4eScU4N+276tnhmcLKHiF48ftibHuziS7/o6iTbhkcytW1
      1AUJTT735ypFM37Fz+rrePa1L4mnXLjvmMYjTz7MKACKCCz6BRvXLqemzcE9djZLFpf1GoLX
      7yO6JcLMh5RJulv0H8CujUQi0et3l5+KzP95LBlBoYiJQhEThSImCkVMFIqYKBQxUShiolDE
      RKGIiUIRE4UiJgpFTBSKmCgUMVEoYqJQxEShiIlCEZOs/sfV2aRiWf2NXsJ/beuaqouf9UQR
      E4UiJgpFTBSKmCgUMVEoYqJQxEShiIlCEROFIiYKRUwUipgoFDFRKGKiUMREoYiJQhEThSIm
      CkVMFIqYKBQxUShiolDERKGIiUIRE4UiJgpFTBSKmCgUMVEoYqJQxEShiIlCEROFIiYKRUwU
      ipgoFDFRKGKiUMREoYiJQhEThSImCkVMFIqYKBQxUShiolDERKGIiUIRE4UiJgpFTBSKmCgU
      MVEoYpI1oSQ/3cgfgkHqWq4859S/tvLc0zUEg0+y/MWP+MbpPua0NVK3/EmCwRqe/tObHDjV
      faylLkhw6esccC67YHIP62qCBPu66U0iO0JxWmnYlmLmrBFXnpNsof61r7lv2QvUrlvNguLd
      1L539PzBKDte3kn+gtWsq32BZTPb2bRpD8mLJ0+lMhClOXJpKclwiFT5DPq4600jC0Jx+Gb7
      FtpmV3PvrVeeldy3i7YZVZQXDgDXbYyrqGRs+J+0ArTuZu+oSirG3YaLARSWVxGI72VfdykU
      +0uINkfoTiVJOJSidFL+ddtZNsn8UDo+4a2j91M9eXCf006ehLGjvd0DrvFMKGqjwwG+i+Ed
      MxrXxYNeJpT0p70j7QJFfkqizVx8qCTDhFKl+Idcs51ktf43egF9O0Vj/QHKFtQwGIj3MTPV
      1Q+3O33EhcsV5dsT0NXVhdudc8n8fq7jHDsODL8wUkSZP0ZDxMHnc5EMh6BsIXns7HGvRCLR
      6xri8b5WmH3S95PRoSRb3mafr4qavh8mAAwcdIbOzvQRB8cporAABkUH0dmZBLpjOeMUMqzw
      0mt4/T5iDREc33gO7Qd/dQ6c7Hmv3NzcHmOJRAKPx2PaV7ZI308Gh3KCjxsaCX/VSHBz+niQ
      pqmLqX2i9JLZQ4bA50c64O7zrx8nwsHo7dzvAvLy6dh/BGea7/zrp4ODn/3A0FmX3dLrxxdr
      IHI6RajLT3UOcl4Gh1JAYFktgbSR6PZVvF+8gssaASDHX87ta+rZdc9vKB/ayeGt7/L5xPnM
      B7h7OlM2b2Dr4ZFUjHPTvqueHZ4prOwRghe/L8a2N5vo8j+KOumWwaFcXUtdkNDk2nPh5JRS
      9ehXrF/zFH/rdHH71IdZ+tio8zOLCCz6BRvXLqemzcE9djZLFpf1GoLX7yO6JcLMh5RJulvO
      nj179kYv4qcgkUj0+t3lgopl9f/H1VwbW9dUXfyc+T+PJSMoFDFRKGKiUMREoYiJQhEThSIm
      CkVMFIqYKBQxUShiolDERKGIiUIRE4UiJgpFTBSKmCgUMVEoYqJQxEShiIlCEROFIiYKRUwU
      ipgoFDFRKGKiUMREoYiJQhEThSImCkVMFIqYKBQxUShiolDERKGIiUIRE4UiJgpFTBSKmCgU
      MVEoYqJQxEShiIlCEROFIiYKRUwUipgoFDFRKGKiUMREoYiJQhEThSImCkVMFIqYKBQxUShi
      olDERKGIiUIRE4UiJgpFTBSKmCgUMVEoYqJQxEShiIlCEROFIiYKRUwUipgoFDFRKGLS/0Yv
      oE/JVj56vZ73wl8ST8FAz12UL/w983yDe53eUhdkfVPawIhKVq6YQxHgtDWyce0bNLU5uO+Y
      waKl87hwmZa6IOv3P8BTz83H50q//x7WPbOB8OTF1D5Rer12mRUyO5R4O6mJj/Ds/GI8OZBs
      b+bvf97EnpU1lOVcPvkEx9umsaT2Me7pcaEoO17eSf6C1awb56Z91ys8v2kPK2vKOHeZqVQG
      ojRHHHxppSTDIVLlMxjReR33mCUy+9VTcC+BKSPx5LgAFzlDJ1E6JkFnV2+T22lzDaOgt0Ot
      u9k7qpKKcbfhYgCF5VUE4nvZl+yeUuwvIdocwbk4kiQcSlE6Kf/a7ilLZXYoaU6f+jfhrS/y
      Yd5c7svrZUIyRkd+MUW9nfxdDO+Y0XQ/K7xMKOlPe0fanCI/JdFmIhdKSYYJpUrxD7l2e8hm
      mf3qAYhuZ9Wz7/I1Q/j5vN9SM/duerx1AOJxvm/aSLAJYCCeuyby4ILHmT7cRVdXF273pWf1
      cx3n2HFg+IWRIsr8MRrOv36S4RCULSSPnT1ulUgkel1qPB7/3/eZgdL3k/mhFM1hRe0cnGSc
      byMfUvfiIR763RyGuy6bVxBgWW3g3GcnSfvhD3j1pXcoWDWPsYMG0dmZhLTEzjiFDCu89BJe
      v49YQwTHN55D+8FfnQMney4pNze3x1gikcDj8fy4vWaY9P1kzavHleNh5MQKfj12HzsOXHUy
      QyfMZdadX9B6AsjLp+OLI2nfPzo4+NkPDPVedp7Xjy/WTOT0p4S6/Ph7fXTdnP4DR2PhR4HW
      1kEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='2018-containers-sign' width='192'>
      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
      f2M8pWGRy7FxAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='containers-total-03-08' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='containers-total-03-18' width='192'>
      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
      fVbsyuiY9OIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='containers-total-03-19' width='192'>
      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
    </thumbnail>
    <thumbnail height='170' name='filler' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='foreign-ports-lading' width='192'>
      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
      G178/28SQp5FMbqBAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='foreign-ports-lading-containers' width='192'>
      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
      //KGZT0ZxiWmAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='foreign-ports-zoom-to-germany' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='ga-ocean-economics-map' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='imports-exports-month/year' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='imports-exports-share' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='imports-exports_03-08' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='marine sector bars?' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='savannah-metro-routes' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='southeast-ocean-economics-map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='stadersand-savannah-path' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
